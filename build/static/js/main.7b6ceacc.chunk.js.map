{"version":3,"sources":["assets/jackpot_white.png","assets/left_arrow.png","assets/nlogo.png","assets/jackpot_.png","assets/2nd_registration_step1.svg","assets/top_arrow.png","assets/right_arrow.png","config.js","utils/index.js","components/Registration/index.js","components/BuyEasy/index.js","components/App/Home.js","components/Admin/EasyAdmin.js","components/Admin/AcceptOwnership.js","components/Admin/NotLoggedIn.js","components/Admin/HpEasyAdmin.js","components/Admin/index.js","components/Dashboard/BuyHpEasy.js","components/Dashboard/index.js","components/SecondRegistrationStep/index.js","components/App/index.js","index.js","assets/logo-.svg"],"names":["module","exports","myConfig","GAS_STATION_API","ETH_TO_USD","DEFAULT_RENEW_CYCLES_LIMIT","METAMASK_URL","JACKPOT_LINES","JACKPOT_BETS","GENESIS_USER","INFURA_API","ETHERSCAN_DOMAIN","CONTRACT_ADDRESS_HPEASY","CONTRACT_ADDRESS_EASYCOIN","HPEASY_FIRST_BLOCK","utils","web3","currentAddress","gasPrice","contractHpEasy","contractEasyCoin","setWeb3","window","ethereum","console","log","Web3","enable","catch","error","eth","getCoinbase","fetch","then","res","json","result","average","transactionPollingTimeout","Contract","hpeasyAbi","easycoinAbi","test","fetchUserAddressById","userId","methods","usersById","call","isValidAddress","address","isAddress","changeRegistrationCost","newCost","Promise","resolve","reject","send","from","message","prepareMessage","changeExchangeRate","newRate","changeUseToken","changeUseTokenPayment","changeBunchCyclesLimit","newLimit","changeOwner","newOwnerAddress","contractAddress","contract","Error","transferOwnership","acceptOwnership","transferFundsFromHpEasy","transferAddress","transferAmount","transferFunds","transferFundsFromEasy","registrationInEth","referrAddress","amount","register","value","payAndSendEasy","buyTokensAndTransfer","sendEasy","transferAndCall","toString","buyEasy","buyTokens","purchaseInEth","purchaseHpEasyPosition","renewInEth","matrixToRenew","renewMatrix","getBetFill","line","bet","betsLineFilling","getJackpotParticipants","betsLineAddresses","getJackpotQueue","jackpotQueue","isTokensPaid","is_tokens_paid","isEthPaid","is_eth_paid","betSize","bet_size","joinJackpotEth","joinJackpot","joinJackpotEasyNewTokens","serializedInt","getInt32Bytes","joinJackpotEasyExistingTokens","isUserExists","isCurrentUserExists","getCurrentUser","users","getCurrentUserClean","user","parseUserParams","getCurrentUserAddress","this","getCleanUser","getUserById","id","getUserAddressById","getUserByIdClean","getUserByAddressClean","parseInt","currentMatrix","current_matrix","directReferrals","direct_referrals","hpeasyCooldownTime","hpeasy_cooldown_time","hpeasyCooldownNum","hpeasy_cooldown_num","lastMatrix","last_matrix","matricesCnt","matrices_cnt","referrer","getTotalUsers","lastUserId","getTotalHpEasys","lastHpEasyId","getRegistrationCost","regCost","getRegistrationCostEasyInEthEquivalent","registrationCostEth","exchangeRate","registrationCost","getExchangeRate","getLastCycle","totalHpEasys","getSkippedHpsOffset","skippedHpEasysOffset","getBunchCyclesLimit","bunchCyclesLimit","getHpEasy","HpEasy","hp","owner","matrixId","matrix_id","getHpEasyOwner","getEasyOwner","getUnacceptedOwnerHpEasy","newOwner","getUnacceptedOwnerEasy","getEasyEthBalance","getBalance","getUseToken","useTokenPayment","getHpEthBalance","getEasyBalanceByUser","userAddress","balanceOf","balance","getPaymentStatusForCurrentUser","callback","paymentQueue","matrix_to_renew","getCleanMatrix","matrices","matrix","referralsCnt","referrals_cnt","matrixReferrer","matrix_referrer","directReferrer","direct_referrer","fromHpeasy","from_hpeasy","cycles","bunchCycles","bunch_cycles","getUserMatrixId","matrixIndex","usersMatrices","getUserMatrixIds","i","r","push","getUserMatrixIdsWithoutRenew","fromHpEasy","getMatrixReferrers","matrixReferrals","getContractTransferEventsByUser","eventName","getPastEvents","fromBlock","toBlock","filter","events","appendBlockTimestamp","toUpperCase","length","getBlock","blockNumber","blockInfo","block_timestamp","timestamp","getSkipMatrixEvents","getRegistrationCostChangeEvents","getJackpotWinnerEvents","err","JSON","stringify","m","split","includes","receipt","transactionHash","hexToAscii","str1","hex","str","n","String","fromCharCode","substr","x","bytes","getInt64Bytes","serializeTwoInts","a","b","concat","Registration","props","state","referrId","referrIdExists","loader","useToken","handleChange","bind","handleSubmit","match","params","location","checkPaymentStatus","REGISTRATION_COST_ETH","Utils","initData","setState","history","pathname","payment","isEasyPaid","addressInBase58","event","target","preventDefault","Swal","fire","icon","title","confirmButtonText","html","className","alt","src","logo","style","display","onSubmit","type","onChange","handleChange2","disabled","width","color","height","visible","React","Component","withRouter","BuyEasy","prevProps","showLoader","onLoaderChange","viewerAddress","input","showCancelButton","inputValidator","ETH_TO_EASY","easyAmount","ethAmount","isConfirmed","changeLoader","reload","handleErroredTransaction","okButtonText","isRegistered","easyBalance","toFixed","easyAccountBalance","onClick","handleBuyEasy","Home","_isMounted","viewId","isAddressExist","handleInputChange","goToLoginRegister","initEthToEasyExchangeRate","initEasyBalance","rate","isNaN","replace","to","EasyAdmin","exchangeRateCandidate","newOwnerCandidate","show","text","chageExchangeRate","parseFloat","chageOwner","rel","href","step","handleExchangeRateValueChange","handleChageExchangeRate","handleTransferAmountChange","handleTransferAddressChange","handleTransfer","unaccaptedOwner","handleNewOwnerValueChange","handleChangeOwner","AcceptOwnership","contractName","handleAcceptOwnership","NotLoggedIn","HpEasyAdmin","registrationCostCandidate","bunchCyclesLimitCandidate","lastCycle","nextCycleMatrix","nextCycleHp","jackpotLoad","getCyclesInfo","nextCycleHPId","nextCycleUser","chageRegistrationCost","showGeneralError","showCatchError","chageUseToken","handleRegistrationCostValueChange","handleChageRegistrationCost","handleBunchCyclesValueChange","handleChageBunchCycles","handleChageUseToken","Admin","isOwnerHpEasy","isUnaccaptedOwnerHpEasy","isOwnerEasy","isUnaccaptedOwnerEasy","ownerHpEasy","unaccaptedOwnerHpEasy","ownerEasy","unaccaptedOwnerEasy","pageIsReady","isShow","toLowerCase","initisOwnerHpEasy","initIsHpEasyUnacceptedOwner","initisOwnerEasy","initIsEasyUnacceptedOwner","unacceptedHpEasyOwner","unacceptedEasyOwner","unacceptedOwner","isAdmin","BuyHpEasy","secondPaymentStep","cancelButtonText","isRenew","Date","renew","buyHpEasy","payEthForPurchase","payEthForRenew","actionName","PURCHASE_COST_ETH","isExtraTokensNeeded","PURCHASE_COST_EASY_ETH_EQUIVALENT","payEasy","isTokenPaymentNeeded","handleUnsuccessfulPayment","isEthPaymentNeeded","handleSuccessfulPayment","PURCHASE_COST_EASY","handleBuyHpEasy","Dashboard","sponsorId","matrixEarningEth","matrixEarningUsd","hpEarningEth","hpEarningUsd","referrals","referMatrixOwnerId","isMatrixOfCurrentUser","totalCycles","metrixEarning","lastUserMatrixId","level1","level2","level3","level4","network","directReferral1","directReferral2","directReferral3","directReferral4","userMatricesIds","transactions","matrixNetworkInfos","inactiveMatrices","totalUsers","totalHPEasys","skippedHpEasys","fetchMatrixInfo","isJackpotInfoBlock","handleJoinJackpot","handleShowJackpotParticipants","initEthToUsdtExchageRate","initPurchaseCosts","initDashboardGeneralInfo","currentUserAddress","initUserGeneralInfo","initPaymentEvents","initMatricesInfo","price","purchaseCostEth","purchaseCostEasyInEthEquivalent","getSkippedHpEasys","getSponsorId","sponsorAddress","sponsor","getUserMatricesIdsList","getMatrixInfo","areMatricesActive","getMatrixNetworkInfo","allUserMatrices","referralsWithTypes","getReferralType","getMatrixOwnerId","fromState","ownerId","matrixOwner","matrixNetworkInfo","referralsTree","parentId","children","buildNodeBranch","calculateNetwork","node","treeDebth","childNode","forEach","elementLevel1","elementLevel2","elementLevel3","firstReferrals","child","refId","checkMatrixStatus","processInactiveMatrixResult","warn","join","isOneMatrix","skippedMatrices","toLocaleLowerCase","transferEvents","processTransferEvents","matrixErnings","hpEarnings","returnValues","date","getDateFromTimestamp","isJackpotInfoLoaded","bets","winners","betsCount","winnersCount","lastWinner","winnerAddress","txId","transaction_id","min","max","Math","ceil","floor","random","d","Number","h","s","difference","seconds","revertedSeconds","toISOString","hash","toLeave","substring","getJackpotPayload","checkJackpotPaymentStatus","joinJackpotEasy","participants","imageUrl","jackpotWhite","imageWidth","imageHeight","imageAlt","queue","isEthNeeded","processJoinJackpotEasySuccess","isEasyNeeded","require","jackpot","handleShowJackpot","logout","key","findCooldownTime","reloadMatrixLevelUpDown","visibility","changeToPreviousMatrix","changeToNextMatrix","map","ref","index","transaction","truncateLong","convertToUsdAndRound","betLine","marginBottom","background","SecondRegistrationStep","REGISTRATION_COST_ETH_FULL","REGISTRATION_COST_EASY_ETH_EQUIVALENT","isExtraTokenNeeded","registrationCostEasy","handleSuccessfulSubmit","handleErroredSubmit","progressIcon","App","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7b6ceacc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/jackpot_white.5b46f7b1.png\";","module.exports = __webpack_public_path__ + \"static/media/left_arrow.708c670e.png\";","module.exports = __webpack_public_path__ + \"static/media/nlogo.4a6aed4f.png\";","module.exports = __webpack_public_path__ + \"static/media/jackpot_.d5219990.png\";","module.exports = __webpack_public_path__ + \"static/media/2nd_registration_step1.e798d677.svg\";","module.exports = __webpack_public_path__ + \"static/media/top_arrow.5ef7d8c8.png\";","module.exports = __webpack_public_path__ + \"static/media/right_arrow.465e85a4.png\";","export const myConfig = {\r\n    GAS_STATION_API: 'ac80563a23fc97879b3a8c7f5417b1a6263ca11ed69fc3e3434f1c9f6e06', //TODO: move to env\r\n    ETH_TO_USD: 365, \r\n    DEFAULT_RENEW_CYCLES_LIMIT : 6,\r\n    METAMASK_URL: 'https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn',\r\n    JACKPOT_LINES : [10, 50, 200, 500 ],\r\n    JACKPOT_BETS: [0.001, 0.005, 0.015, 0.05, 0.15, 0.5], \r\n    GENESIS_USER : '0x06CC76Ee59b1760702412Ee2CCdA27Cc2078e590',  \r\n    //INFURA_API: 'wss://ropsten.infura.io/ws/v3/434ccecefa2543e293ff9cc3a556c87f',    \r\n    //ETHERSCAN_DOMAIN: 'https://ropsten.etherscan.io/', \r\n    //CONTRACT_ADDRESS_HPEASY: '0x06EA177A9B215FC7E987EA6aEcF29d330A5102E2', //testnet, unoptomized: '0xf05c93e556bd03b382a44ed236f2607da3d569f2',  //added use token\r\n    //CONTRACT_ADDRESS_EASYCOIN: '0x5c4DB9783541D6c303E02Cd7187b7179444dbd33', //testnet, unoptimized: '0x2619bfab748a9a215f5dc3123b80b32391ea44d5', //testnet  \r\n    INFURA_API: 'wss://mainnet.infura.io/ws/v3/434ccecefa2543e293ff9cc3a556c87f',    \r\n    ETHERSCAN_DOMAIN: 'https://bscscan.com/', \r\n    CONTRACT_ADDRESS_HPEASY: '0x923553db6fc9686af3e9281ea7de39cb0ea7dac5',  //mainnet\r\n    CONTRACT_ADDRESS_EASYCOIN: '0x21d1ea9d36fdef4bf3432052b3f77ecf85c86c73', //mainnet\r\n    HPEASY_FIRST_BLOCK: 11171822\r\n}","import { myConfig } from '../config.js';\nimport Web3 from 'web3';\nimport hpeasyAbi from './hpeasy_abi.json'\nimport easycoinAbi from './easycoin_abi.json';\n// import poolAbi from './pool_abi.json';\n\n\nconst utils = {\n    web3: false,\n    currentAddress: false,\n    gasPrice: 900000000,\n    contractHpEasy: false,\n    contractEasyCoin: false,\n\n    async setWeb3(window) {\n        try {\n            if (typeof window.ethereum !== 'undefined') {\n                console.log(\"init browser web3\");\n                this.web3 = await new Web3(window.ethereum);\n                window.ethereum.enable().catch(error => {\n                    console.log(\"User denied account access, init infura web3\");\n                    this.web3 = new Web3(myConfig.INFURA_API);\n                });\n                this.currentAddress = await this.web3.eth.getCoinbase();\n                //console.log(\"Account: \" + this.currentAddress);\n            } else {\n                console.log(\"init Infura web3\");\n                this.web3 = await new Web3(myConfig.INFURA_API);\n            }\n\n            //console.log(\"Init other data\");\n            await fetch(\"https://ethgasstation.info/api/ethgasAPI.json?api-key=\" + myConfig.GAS_STATION_API)\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        this.gasPrice = result.average * 100000000;\n                    },\n                    (error) => {\n                        console.error(\"Can't get actual gas price, use default value instead\");\n                        this.gasPrice = 50000000000;\n                    });\n\n            this.web3.eth.transactionPollingTimeout = 120; // set wait transaction timeout to 120 seconds\n\n            this.contractHpEasy = await new this.web3.eth.Contract(hpeasyAbi, myConfig.CONTRACT_ADDRESS_HPEASY);\n            this.contractEasyCoin = await new this.web3.eth.Contract(easycoinAbi, myConfig.CONTRACT_ADDRESS_EASYCOIN);\n            \n            this.test();\n        } catch (error) {\n            console.error(\"Couldnot init web3 or contracts\");\n            console.error(error);\n        }\n    },\n\n    \n    async test() {\n        /*\n        let abi = poolAbi;\n        \n        let current = await this.web3.eth.getCoinbase();\n        console.log(current);\n        console.log(typeof current);\n        let myContract = await new this.web3.eth.Contract(abi, '0x9946254a82c3b556c58479383e5d2b1baf9107a3');\n        console.log(myContract);\n        //console.log(current);\n        console.log(\"object\");\n        myContract.events.Staked(\n            { filter: { user: '0x55aAf5708707c7c6d404F11ABC739296A2e28Ef8' } },\n            (err : any, event : any) => { \n              console.log(event);\n            }\n        );\n\n        /*\n        let code = this.myContract.methods.approve('0xb41bce1bd30f1207bae30123a73633049ebf7b99', '110000000000000000000000000').encodeABI(); \n        utils.web3.eth.sendTransaction({ \n            to: '0x5b6C8863f75aC05E6fC9eC7d03ADcA6F7225Ba96',\n            from: current,\n            data: code \n        }, function (err, transactionHash) {\n            console.log(err);\n            if (!err)\n                console.log(transactionHash); \n        }); \n        */\n    }, \n\n    // #region ADDRESS\n    async fetchUserAddressById(userId) {\n        try {\n            return await this.contractHpEasy.methods.usersById(userId).call();\n        } catch (error) {\n            console.error(error);\n        }\n    },\n\n    async isValidAddress(address) {\n        return await this.web3.utils.isAddress(address);\n    },\n    // #endregion\n\n\n    // #region OWNER actions\n    async changeRegistrationCost(newCost) {\n        return new Promise(function (resolve, reject) {\n            console.log(\"Start operating with contract INFINITY GLOBAL\");\n            utils.contractHpEasy.methods.changeRegistrationCost(newCost).send({\n                from: utils.currentAddress,\n                gasPrice: utils.gasPrice,\n            }).then(res => {\n                resolve(res);\n            }).catch(error => {\n                let message = utils.prepareMessage(error);\n\n                console.error(\"INFINITY GLOBAL error:\");\n                console.error(error);\n                reject(message);\n            });\n        })\n    },\n\n    async changeExchangeRate(newRate) {\n        return new Promise(function (resolve, reject) {\n            console.log(\"Start operating with contract INFINITY GLOBAL\");\n            utils.contractEasyCoin.methods.changeExchangeRate(newRate).send({\n                from: utils.currentAddress,\n                gasPrice: utils.gasPrice,\n            }).then(res => {\n                resolve(res);\n            }).catch(error => {\n                console.error(\"INFINITY GLOBAL error:\");\n                console.error(error);\n                let message = utils.prepareMessage(error);\n                reject(message);\n            });\n        })\n    },\n\n    async changeUseToken() {\n        return new Promise(function (resolve, reject) {\n            console.log(\"Start operating with contract INFINITY GLOBAL\");\n            utils.contractHpEasy.methods.changeUseTokenPayment().send({\n                from: utils.currentAddress,\n                gasPrice: utils.gasPrice,\n            }).then(res => {\n                resolve(res);\n            }).catch(error => {\n                console.error(\"INFINITY GLOBAL error:\");\n                console.error(error);\n                let message = utils.prepareMessage(error);\n                reject(message);\n            });\n        })\n    },\n\n    async changeBunchCyclesLimit(newLimit) {\n        return new Promise(function (resolve, reject) {\n            console.log(\"Start operating with contract HpEasy\");\n            utils.contractHpEasy.methods.changeBunchCyclesLimit(newLimit).send({\n                from: utils.currentAddress,\n                gasPrice: utils.gasPrice,\n            }).then(res => {\n                resolve(res);\n            }).catch(error => {\n                console.error(\"HpEasy error:\");\n                console.error(error);\n                let message = utils.prepareMessage(error);\n                reject(message);\n            });\n        })\n    },\n\n    async changeOwner(newOwnerAddress, contractAddress) {\n        let contract;\n        if (contractAddress === myConfig.CONTRACT_ADDRESS_HPEASY) {\n            contract = this.contractHpEasy;\n        } else if (contractAddress === myConfig.CONTRACT_ADDRESS_EASYCOIN) {\n            contract = this.contractEasyCoin;\n        } else {\n            throw new Error('No such contract address');\n        }\n\n        return new Promise(function (resolve, reject) {\n            console.log(\"Start operating with contract \" + contractAddress);\n            contract.methods.transferOwnership(newOwnerAddress).send({\n                from: utils.currentAddress,\n                gasPrice: utils.gasPrice,\n            }).then(res => {\n                resolve(res);\n            }).catch(error => {\n                console.error(\"HpEasy error:\");\n                console.error(error);\n                let message = utils.prepareMessage(error);\n                reject(message);\n            });\n        })\n    },\n\n    async acceptOwnership(contractAddress) {\n        let contract;\n        if (contractAddress === myConfig.CONTRACT_ADDRESS_HPEASY) {\n            contract = this.contractHpEasy;\n        } else if (contractAddress === myConfig.CONTRACT_ADDRESS_EASYCOIN) {\n            contract = this.contractEasyCoin;\n        } else {\n            throw new Error('No such contract address');\n        }\n\n        return new Promise(function (resolve, reject) {\n            console.log(\"Start operating with contract \" + contractAddress);\n            contract.methods.acceptOwnership().send({\n                from: utils.currentAddress,\n                gasPrice: utils.gasPrice,\n            }).then(res => {\n                resolve(res);\n            }).catch(error => {\n                console.error(\"HpEasy error:\");\n                console.error(error);\n                let message = utils.prepareMessage(error);\n                reject(message);\n            });\n        })\n    },\n\n    async transferFundsFromHpEasy(transferAddress, transferAmount) {\n        return new Promise(function (resolve, reject) {\n            console.log(\"Start operating with contract HpEasy\");\n            utils.contractHpEasy.methods.transferFunds(transferAddress, transferAmount).send({\n                from: utils.currentAddress,\n                gasPrice: utils.gasPrice,\n            }).then(res => {\n                resolve(res);\n            }).catch(error => {\n                console.error(\"HpEasy error:\");\n                console.error(error);\n                let message = utils.prepareMessage(error);\n                reject(message);\n            });\n        })\n    },\n\n    async transferFundsFromEasy(transferAddress, transferAmount) {\n        return new Promise(function (resolve, reject) {\n            console.log(\"Start operating with contract INFINITY GLOBAL\");\n            utils.contractEasyCoin.methods.transferFunds(transferAddress, transferAmount).send({\n                from: utils.currentAddress,\n                gasPrice: utils.gasPrice\n            }).then(res => {\n                resolve(res);\n            }).catch(error => {\n                console.error(\"HpEasy error:\");\n                console.error(error);\n                let message = utils.prepareMessage(error);\n                reject(message);\n            });\n        })\n    },\n    // #endregion\n\n\n    // #region PAYMENT\n    async registrationInEth(referrAddress, amount) {\n        return new Promise(function (resolve, reject) {\n            if (!utils.currentAddress) reject(\"Not allowed operation for infura user\");\n            try {\n                console.log(\"Start operating with contract HpEasy\");\n\n                utils.contractHpEasy.methods.register(referrAddress).send({\n                    from: utils.currentAddress,\n                    gasPrice: utils.gasPrice,\n                    value: amount\n                }).then(res => {\n                    console.log(res);\n                    resolve(res);\n                }).catch(error => {\n                    console.error(\"HpEasy error:\");\n                    console.error(error);\n                    let message = utils.prepareMessage(error);\n                    reject(message);\n                });\n            } catch (error) {\n                console.log(\"UNEXPECTED ERROR\");\n                console.error(error);\n                reject(\"UNEXPECTED ERROR. \" + error);\n\n            }\n        })\n    },\n\n    async payAndSendEasy(amount) {\n        //console.log(await utils.web3.eth.getTransactionCount(utils.currentAddress, 'pending'));\n        return new Promise(function (resolve, reject) {\n            if (!utils.currentAddress) reject(\"Not allowed operation for infura user\");\n            //console.log(amount);\n            try {\n                /*\n                let tx = {\n                    from: utils.currentAddress,\n                    to: myConfig.CONTRACT_ADDRESS_EASYCOIN,\n                    value: amount,\n                    data: utils.contractEasyCoin.methods.buyTokensAndTransfer(myConfig.CONTRACT_ADDRESS_HPEASY, []).encodeABI(),\n                    gasPrice: utils.gasPrice,\n                    gasLimit: 3200000\n                }\n                console.log(tx);\n                utils.web3.eth.sendTransaction(tx).then(res => {\n                    console.log(res);\n                    resolve(res);\n                }) */\n                \n                utils.contractEasyCoin.methods.buyTokensAndTransfer(myConfig.CONTRACT_ADDRESS_HPEASY, []).send({\n                    from: utils.currentAddress,\n                    value: amount,\n                    gasPrice: utils.gasPrice\n                }).then(res => {\n                    console.log(res);\n                    resolve(res);\n                }).catch(error => {\n                    console.error(\"HpEasy error:\");\n                    console.error(error);\n                    let message = utils.prepareMessage(error);\n                    reject(message);\n                });\n            } catch (error) {\n                console.log(\"UNEXPECTED ERROR\");\n                console.error(error);\n                reject(\"UNEXPECTED ERROR. \" + error);\n            }\n        });\n    },\n\n    async sendEasy(amount) {\n        return new Promise(function (resolve, reject) {\n            if (!utils.currentAddress) reject(\"Not allowed operation for infura user\");\n            try {\n                console.log(\"Start operating with contract INFINITY GLOBAL\");\n                console.log(amount);\n\n                utils.contractEasyCoin.methods.transferAndCall(myConfig.CONTRACT_ADDRESS_HPEASY, amount.toString(), []).send({\n                    from: utils.currentAddress,\n                    gasPrice: utils.gasPrice\n                }).then(res => {\n                    console.log(res);\n                    resolve(res);\n                }).catch(error => {\n                    console.error(\"HpEasy error:\");\n                    console.error(error);\n                    let message = utils.prepareMessage(error);\n                    reject(message);\n                });\n            } catch (error) {\n                console.log(\"UNEXPECTED ERROR\");\n                console.error(error);\n                reject(\"UNEXPECTED ERROR. \" + error);\n            }\n        });\n    },\n\n    async buyEasy(amount) {\n        return new Promise(function (resolve, reject) {\n            if (!utils.currentAddress) reject(\"Not allowed operation for infura user\");\n            try {\n                console.log(\"Start operating with contract INFINITY GLOBAL\");\n\n                utils.contractEasyCoin.methods.buyTokens().send({\n                    from: utils.currentAddress,\n                    gasPrice: utils.gasPrice,\n                    value: amount\n                }).then(res => {\n                    console.log(res);\n                    resolve(res);\n                }).catch(error => {\n                    console.error(\"HpEasy error:\");\n                    console.error(error);\n                    let message = utils.prepareMessage(error);\n                    reject(message);\n                });\n            } catch (error) {\n                console.log(\"UNEXPECTED ERROR\");\n                console.error(error);\n                reject(\"UNEXPECTED ERROR. \" + error);\n            }\n        });\n    },\n\n    async purchaseInEth(amount) {\n        return new Promise(function (resolve, reject) {\n            if (!utils.currentAddress) reject(\"Not allowed operation for infura user\");\n            try {\n                console.log(\"Start operating with contract HpEasy\");\n                utils.contractHpEasy.methods.purchaseHpEasyPosition().send({\n                    from: utils.currentAddress,\n                    gasPrice: utils.gasPrice,\n                    value: amount\n                }).then(res => {\n                    console.log(res);\n                    resolve(res);\n                }).catch(error => {\n                    console.error(\"HpEasy error:\");\n                    console.error(error);\n                    let message = utils.prepareMessage(error);\n                    reject(message);\n                });\n            } catch (error) {\n                console.log(\"UNEXPECTED ERROR\");\n                console.error(error);\n                reject(\"UNEXPECTED ERROR. \" + error);\n            }\n        })\n    },\n\n    async renewInEth(amount, matrixToRenew) {\n        return new Promise(function (resolve, reject) {\n            if (!utils.currentAddress) reject(\"Not allowed operation for infura user\");\n            try {\n                console.log(\"Start operating with contract HpEasy\");\n                utils.contractHpEasy.methods.renewMatrix(matrixToRenew).send({\n                    from: utils.currentAddress,\n                    gasPrice: utils.gasPrice,\n                    value: amount\n                }).then(res => {\n                    console.log(res);\n                    resolve(res);\n                }).catch(error => {\n                    console.error(\"HpEasy error:\");\n                    console.error(error);\n                    let message = utils.prepareMessage(error);\n                    reject(message);\n                });\n            } catch (error) {\n                console.log(\"UNEXPECTED ERROR\");\n                console.error(error);\n                reject(\"UNEXPECTED ERROR. \" + error);\n            }\n        })\n    },\n\n\n\n    // #endregion\n\n\n    // #region JACKPOT\n    async getBetFill(line, bet) {\n        try {\n            return await this.contractHpEasy.methods.betsLineFilling(line, (bet * 1000000).toString() + \"000000000000\").call();\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n\n    },\n\n    async getJackpotParticipants(line, bet) {\n        try {\n            return await this.contractHpEasy.methods.betsLineAddresses(line, (bet * 1000000).toString() + \"000000000000\").call();\n            //let prtcpnts = Array(participants.participants);\n            //return prtcpnts[0];\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    },\n\n    async getJackpotQueue() {\n        if (!this.currentAddress) return null;\n        try {\n            let res = await this.contractHpEasy.methods.jackpotQueue(this.currentAddress).call();\n            return {\n                isTokensPaid: res.is_tokens_paid,\n                isEthPaid: res.is_eth_paid,\n                line: res.line,\n                betSize: res.bet_size\n            };\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    },\n\n    async joinJackpotEth(line, bet) {\n        return new Promise(function (resolve, reject) {\n            if (!utils.currentAddress) reject(\"Not allowed operation for infura user\");\n            try {\n                console.log(\"Start operating with contract HpEasy\");\n                utils.contractHpEasy.methods.joinJackpot(line).send({\n                    from: utils.currentAddress,\n                    gasPrice: utils.gasPrice,\n                    value: bet\n                }).then(res => {\n                    console.log(res);\n                    resolve(res);\n                }).catch(error => {\n                    console.error(\"HpEasy error:\");\n                    console.error(error);\n                    let message = utils.prepareMessage(error);\n                    reject(message);\n                });\n            } catch (error) {\n                console.log(\"UNEXPECTED ERROR\");\n                console.error(error);\n                reject(\"UNEXPECTED ERROR. \" + error);\n\n            }\n        })\n    },\n\n    async joinJackpotEasyNewTokens(line, betSize) {\n        return new Promise(function (resolve, reject) {\n            if (!utils.currentAddress) reject(\"Not allowed operation for infura user\");\n            try {\n                console.log(\"Start operating with contract INFINITY GLOBAL\");\n                let serializedInt = utils.getInt32Bytes(line);\n\n                utils.contractEasyCoin.methods.buyTokensAndTransfer(myConfig.CONTRACT_ADDRESS_HPEASY, serializedInt).send({\n                    from: utils.currentAddress,\n                    gasPrice: utils.gasPrice,\n                    value: betSize\n                }).then(res => {\n                    console.log(res);\n                    resolve(res);\n                }).catch(error => {\n                    console.error(\"HpEasy error:\");\n                    console.error(error);\n                    let message = utils.prepareMessage(error);\n                    reject(message);\n                });\n            } catch (error) {\n                console.log(\"UNEXPECTED ERROR\");\n                console.error(error);\n                reject(\"UNEXPECTED ERROR. \" + error);\n            }\n        })\n    },\n\n    async joinJackpotEasyExistingTokens(line, betSize) {\n        return new Promise(function (resolve, reject) {\n            if (!utils.currentAddress) reject(\"Not allowed operation for infura user\");\n            try {\n                console.log(\"Start operating with contract INFINITY GLOBAL\");\n                let serializedInt = utils.getInt32Bytes(line);\n\n                utils.contractEasyCoin.methods.transferAndCall(myConfig.CONTRACT_ADDRESS_HPEASY, betSize.toString(), serializedInt).send({\n                    from: utils.currentAddress,\n                    gasPrice: utils.gasPrice\n                }).then(res => {\n                    console.log(res);\n                    resolve(res);\n                }).catch(error => {\n                    console.error(\"HpEasy error:\");\n                    console.error(error);\n                    let message = utils.prepareMessage(error);\n                    reject(message);\n                });\n            } catch (error) {\n                console.log(\"UNEXPECTED ERROR\");\n                console.error(error);\n                reject(\"UNEXPECTED ERROR. \" + error);\n            }\n        })\n    },\n    // #endregion\n\n\n    // #region MATRICES Info\n    async isUserExists() {\n        if (!this.currentAddress) return false;\n        try {\n            //web3.eth.getAccounts(accounts => console.log(accounts[0]))\n            return await this.contractHpEasy.methods.isUserExists(this.currentAddress).call();\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    },\n\n    async isCurrentUserExists() {\n        if (!this.currentAddress) return false;\n        try {\n            return await this.contractHpEasy.methods.isUserExists(this.currentAddress).call();\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    },\n\n    async getCurrentUser() {\n        if (!this.currentAddress) return null;\n        try {\n            return await this.contractHpEasy.methods.users(this.currentAddress).call();\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    },\n\n    async getCurrentUserClean() {\n        if (!this.currentAddress) return null;\n        try {\n            let address = this.currentAddress;\n            let user = await this.contractHpEasy.methods.users(address).call();\n            return this.parseUserParams(user, address);\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    },\n\n    getCurrentUserAddress() {\n        return this.currentAddress;\n    },\n\n    async getCleanUser(address) {\n        try {\n            if (!await this.isValidAddress(address)) return null;\n            let user = await this.contractHpEasy.methods.users(address).call();\n            return this.parseUserParams(user, address);\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    },\n\n    async getUserById(id) {\n        try {\n            let address = await this.getUserAddressById(id);\n            return await this.contractHpEasy.methods.users(address).call();\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    },\n\n    async getUserByIdClean(id) {\n        try {\n            let address = await this.getUserAddressById(id);\n            let user = await this.contractHpEasy.methods.users(address).call();\n            return this.parseUserParams(user, address);\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    },\n\n    async getUserByAddressClean(address) {\n        try {\n            let user = await this.contractHpEasy.methods.users(address).call();\n            return this.parseUserParams(user, address);\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    },\n\n    async getUserAddressById(id) {\n        try {\n            return await this.contractHpEasy.methods.usersById(id).call();\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    },\n\n    parseUserParams(user, address) {\n        return {\n            userId: parseInt(user.id),\n            address: address,\n            currentMatrix: parseInt(user.current_matrix),\n            directReferrals: parseInt(user.direct_referrals),\n            hpeasyCooldownTime: parseInt(user.hpeasy_cooldown_time),\n            hpeasyCooldownNum: parseInt(user.hpeasy_cooldown_num),\n            lastMatrix: parseInt(user.last_matrix),\n            matricesCnt: parseInt(user.matrices_cnt),\n            referrer: user.referrer,\n        }\n    },\n\n    // #endregion\n\n\n    // #region GENERAL Contract Info\n    async getTotalUsers() {\n        try {\n            return await this.contractHpEasy.methods.lastUserId().call() - 1;\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    },\n\n    async getTotalHpEasys() {\n        try {\n            let lastHpEasyId = await this.contractHpEasy.methods.lastHpEasyId().call();\n            return lastHpEasyId - 1;\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    },\n\n    async getRegistrationCost() {\n        try {\n            return await this.contractHpEasy.methods.regCost().call();\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    },\n\n    async getRegistrationCostEasyInEthEquivalent(registrationCostEth, exchangeRate) {\n        let registrationCost;\n\n        if (typeof registrationCostEth !== 'undefined' && registrationCostEth !== null) {\n            registrationCost = registrationCostEth;\n        } else {\n            registrationCost = await this.getRegistrationCost();\n            if (registrationCost === null) return null;\n        }\n\n        if (typeof exchangeRate === 'undefined' || exchangeRate === null || exchangeRate === 0) {\n            exchangeRate = await this.getExchangeRate();\n            if (exchangeRate === null) return null;\n        }\n\n        return registrationCost / exchangeRate;\n    },\n\n    async getLastCycle() {\n        let totalHpEasys = await this.getTotalHpEasys();\n        if (totalHpEasys !== null) {\n            return totalHpEasys / 2;\n        } else {\n            return 0;\n        }\n    },\n\n    async getSkippedHpsOffset() {\n        try {\n            return await this.contractHpEasy.methods.skippedHpEasysOffset().call();\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    },\n\n    async getExchangeRate() {\n        try {\n            let exchangeRate = await this.contractEasyCoin.methods.exchangeRate().call();\n            return (exchangeRate);\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    },\n\n    async getBunchCyclesLimit() {\n        try {\n            return await this.contractHpEasy.methods.bunchCyclesLimit().call();\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    },\n\n    async getHpEasy(id) {\n        try {\n            let hp = await this.contractHpEasy.methods.HpEasy(id).call();\n            return {\n                owner: hp.owner,\n                matrixId: hp.matrix_id\n            };\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    },\n\n    async getHpEasyOwner() {\n        try {\n            return await this.contractHpEasy.methods.owner().call();\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    },\n\n    async getEasyOwner() {\n        try {\n            return await this.contractEasyCoin.methods.owner().call();\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    },\n\n    async getUnacceptedOwnerHpEasy() {\n        try {\n            return await this.contractHpEasy.methods.newOwner().call();\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    },\n\n    async getUnacceptedOwnerEasy() {\n        try {\n            return await this.contractEasyCoin.methods.newOwner().call();\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    },\n\n    async getEasyEthBalance() {\n        try {\n            return await this.web3.eth.getBalance(myConfig.CONTRACT_ADDRESS_EASYCOIN);\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    },\n\n    async getUseToken() {\n        try {\n            return await this.contractHpEasy.methods.useTokenPayment().call();\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    },\n\n    async getHpEthBalance() {\n        try {\n            return await this.web3.eth.getBalance(myConfig.CONTRACT_ADDRESS_HPEASY);\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    },\n\n    async getEasyBalanceByUser(userAddress) {\n        if (!this.currentAddress) return null;\n        try {\n            if (typeof userAddress === 'undefined') userAddress = this.currentAddress;\n            let balance = await this.contractEasyCoin.methods.balanceOf(userAddress).call();\n            return (balance / 1000000000000000000)\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    },\n\n\n    // #endregion\n\n\n    // #region PAYMENT Queue\n    async getPaymentStatusForCurrentUser(callback) {\n        if (!this.currentAddress) return null;\n        try {\n            let res = await this.contractHpEasy.methods.paymentQueue(this.currentAddress).call();\n\n            res = {\n                isEthPaid: res.is_eth_paid,\n                isTokensPaid: res.is_tokens_paid,\n                matrixToRenew: res.matrix_to_renew,\n                referrer: res.referrer\n            }\n            if (typeof callback !== 'undefined' && callback !== null) {\n                callback(res);\n                return res;\n            } else {\n                return res;\n            }\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    },\n    // #endregion\n\n\n    // #region MATRICES\n    async getCleanMatrix(matrixId) {\n        let matrix = await this.contractHpEasy.methods.matrices(matrixId).call();\n        if (matrix === null) return null;\n\n        return {\n            id: parseInt(matrix.id),\n            owner: matrix.owner,\n            referralsCnt: parseInt(matrix.referrals_cnt),\n            matrixReferrer: parseInt(matrix.matrix_referrer),\n            directReferrer: matrix.direct_referrer,\n            fromHpeasy: parseInt(matrix.from_hpeasy),\n            cycles: parseInt(matrix.cycles),\n            bunchCycles: parseInt(matrix.bunch_cycles)\n        }\n    },\n\n    async getUserMatrixId(userId, matrixIndex) {\n        try {\n            return await this.contractHpEasy.methods.usersMatrices(userId, matrixIndex).call();\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    },\n\n    async getUserMatrixIds(userId) {\n        let result = [];\n        let i = 0;\n\n        try {\n            while (true) {\n                let r = await this.contractHpEasy.methods.usersMatrices(userId, i).call();\n                r = parseInt(r);\n                if (r !== 0) {\n                    result.push(r);\n                    i++;\n                } else {\n                    break;\n                }\n            }\n        } catch (error) {\n            console.error(\"Interrupted receiving user \" + userId + \" matrices on step \" + i);\n            console.error(error);\n        }\n\n        return result;\n    },\n\n    //Obsolete\n    async getUserMatrixIdsWithoutRenew(userId) {\n        let result = [];\n        let i = 0;\n\n        try {\n            while (true) {\n                let r = await this.contractHpEasy.methods.usersMatrices(userId, i).call();\n                r = parseInt(r);\n                if (r !== 0) {\n                    let matrix = await this.getCleanMatrix(r);\n                    if (matrix.fromHpEasy !== 2) {\n                        result.push(r);\n                    }\n                    i++;\n                } else {\n                    break;\n                }\n            }\n        } catch (error) {\n            console.error(\"Interrupted receiving user \" + userId + \" matrices on step \" + i);\n            console.error(error);\n        }\n\n        return result;\n    },\n\n    async getMatrixReferrers(matrixId) {\n        let result = [];\n        let i = 0;\n\n        try {\n            while (true) {\n                let r = await this.contractHpEasy.methods.matrixReferrals(matrixId, i).call();\n                r = parseInt(r);\n                if (r !== 0) {\n                    result.push(r);\n                    i++;\n                } else {\n                    break;\n                }\n            }\n        } catch (error) {\n            console.error(\"Interrupted receiving matrix \" + matrixId + \" referrals on step \" + i);\n            console.error(error);\n        }\n\n        return result;\n    },\n    // #endregion\n\n\n    // #region EVENTS\n    async getContractTransferEventsByUser(eventName, userAddress) {\n        try {\n            let events = await utils.contractHpEasy.getPastEvents(eventName, {\n                fromBlock: myConfig.HPEASY_FIRST_BLOCK,\n                toBlock: 'latest',\n                filter: { user: userAddress }\n            });\n            events = await this.appendBlockTimestamp(events);\n            return events;\n        } catch (error) {\n            console.error(\"Getting \" + eventName.toUpperCase() + \" events for the contract is interrupted\");\n            console.error(error);\n            return [];\n        }\n    },\n\n    async appendBlockTimestamp(events) {\n        for (let i = 0; i < events.length; i++) {\n            try {\n                let blockInfo = await utils.web3.eth.getBlock(events[i].blockNumber);\n                events[i].block_timestamp = blockInfo.timestamp;\n            } catch (error) {\n                console.error(\"Couldnot append timestamps for i \" + i);\n                events[i].block_timestamp = 0;\n            }\n        }\n\n        return events;\n\n    },\n\n    //Unused\n    async getSkipMatrixEvents(matrixId) {\n        try {\n            return await utils.contractHpEasy.getPastEvents(\"SkipMatrix\", {\n                fromBlock: myConfig.HPEASY_FIRST_BLOCK,\n                toBlock: 'latest',\n                filter: { matrixId: matrixId.toString() }\n            });\n        } catch (error) {\n            console.error(\"Getting SkipMatrix events for the contract is interrupted\");\n            console.error(error);\n            return [];\n        }\n    },\n\n    async getRegistrationCostChangeEvents() {\n        try {\n            return await utils.contractHpEasy.getPastEvents(\"ChangeRegistrationCost\", {\n                fromBlock: myConfig.HPEASY_FIRST_BLOCK,\n                toBlock: 'latest'\n            });\n        } catch (error) {\n            console.error(\"Getting NewJackpotWinner events for the contract is interrupted\");\n            console.error(error);\n            return [];\n        }\n    },\n\n    async getJackpotWinnerEvents(line, betSize) {\n        try {\n            return await utils.contractHpEasy.getPastEvents(\"NewJackpotWinner\", {\n                fromBlock: myConfig.HPEASY_FIRST_BLOCK,\n                toBlock: 'latest',\n                filter: { line: line.toString(), betSize: (betSize * 1000000).toString() + \"000000000000\" }\n            });\n        } catch (error) {\n            console.error(\"Getting NewJackpotWinner events for the contract is interrupted\");\n            console.error(error);\n            return [];\n        }\n    },\n    // #endregion\n\n\n    // #region UTILS\n    prepareMessage(err) {\n        console.log(JSON.stringify(err)); //TODO: delete\n        console.log(err.toString()); //TODO: delete\n\n        let m = err.toString().split(':');\n        //console.log(m);\n        let message = m.length > 1\n            ? m[1]\n            : (err.toString() !== \"[object Object]\"\n                ? err.toString() : '');\n\n        if (message.includes(\"Private key does not match address in transaction\")) {\n            message = \"Please connect your Web3 provider <br><i>( <a href='\" + myConfig.METAMASK_URL + \"' target='_blank' rel='noopener noreferrer'>MetaMask</a> or other wallets that support online operations)</i>\"\n        }\n\n        /*\n        if (typeof err.output !== 'undefined' && typeof err.output.contractResult[0] !== 'undefined') {\n            console.log(err.output);\n            let t = err.output.contractResult[0].replace('08c379a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000', '');\n            t = this.hexToAscii(t);\n            if (t) message += '<p><b>MESSAGE:</b> ' + t + '</p>';\n        } */\n\n        if (err.message && !err.message.toString().includes(\"blockHash\")) {\n            message += `<p> ${err.message}</p>`;\n        }\n\n        if (err.receipt && err.receipt.transactionHash) {\n            message += '<p> <b>Tx:</b> ' + err.receipt.transactionHash + '</p>';\n            message += \"<p>You can the check transaction details manually on&nbsp;\";\n            message += \"<a href='\" + myConfig.ETHERSCAN_DOMAIN + \"tx/\" + err.receipt.transactionHash + \"' target='_blank' title='Transaction info on Etherscan' rel='noopener noreferrer'>Etherscan</a><p>\";\n        } else {\n            console.log(\"no tx data\");\n        }\n\n        message += '<p>Please, retry action or refresh page</p>';\n        return message;\n    },\n\n    //Unused\n    hexToAscii(str1) {\n        var hex = str1.toString();\n        var str = '';\n        for (var n = 0; n < hex.length; n += 2) {\n            str += String.fromCharCode(parseInt(hex.substr(n, 2), 16));\n        }\n        return str;\n    },\n\n    getInt32Bytes(x) {\n        let bytes = [];\n        let i = 0;\n        do {\n            bytes[i++] = x & (255);\n            x = x >> 8;\n        } while (i < 4)\n\n        return bytes;\n    },\n\n    getInt64Bytes(x) {\n        let bytes = [];\n        let i = 0;\n        do {\n            bytes[i++] = x & (255);\n            x = x >> 8;\n        } while (i < 8)\n\n        return bytes;\n    },\n\n    serializeTwoInts(a, b) {\n        let res = this.getInt64Bytes(a);\n        return res.concat(this.getInt64Bytes(b));\n    },\n    // #endregion\n\n    // #region ALERTS\n\n    //#endregion\n\n};\n\nexport default utils;","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Swal from 'sweetalert2'; //https://sweetalert2.github.io\r\nimport Loader from 'react-loader-spinner';\r\nimport './Registration.scss';\r\nimport logo from '../../assets/logo-.svg';\r\nimport Utils from '../../utils';\r\nimport { myConfig } from '../../config.js';\r\n\r\nclass Registration extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            referrId: props.referrId ?? '',\r\n            referrAddress: props.referrAddress ?? '',\r\n            referrIdExists: false,\r\n            loader: false,\r\n            useToken: true\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n        if (this.props.match.params.id != null) {\r\n            this.state.referrId = this.props.match.params.id;\r\n        } else {\r\n            this.state.referrId = 0;\r\n        }\r\n\r\n        if (typeof this.props.location !== 'undefined' && typeof this.props.location.state !== 'undefined') {\r\n            this.state.referrId = this.props.location.state.referrId;\r\n        }\r\n\r\n        this.checkPaymentStatus = this.checkPaymentStatus.bind(this);\r\n\r\n        this.REGISTRATION_COST_ETH = 0;\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await Utils.setWeb3(window);\r\n        this.initData();\r\n    }\r\n\r\n    async initData() {\r\n        this.getRegistrationCost();\r\n        this.getUseToken();\r\n        this.getUserAddressById(this.state.referrId);\r\n        this.checkPaymentStatus();\r\n    }\r\n\r\n    async getRegistrationCost() {\r\n        let registrationCost = await Utils.getRegistrationCost();\r\n        if (registrationCost === null) return;\r\n        this.REGISTRATION_COST_ETH = registrationCost;\r\n    }\r\n\r\n    async getUseToken() {\r\n        let useToken = await Utils.getUseToken();\r\n        if (useToken === null) return;\r\n        this.setState({ useToken: useToken });\r\n    }\r\n\r\n    async checkPaymentStatus() {\r\n        if (await Utils.isCurrentUserExists()) {\r\n            this.props.history.push({\r\n                pathname: '/dashboard',\r\n                state: {}\r\n            });\r\n            return;\r\n        } else {\r\n            let payment = await Utils.getPaymentStatusForCurrentUser();\r\n\r\n            if (payment.isEthPaid && !payment.isTokensPaid) {\r\n                this.props.history.push({\r\n                    pathname: '/regfinish',\r\n                    state: {\r\n                        isEthPaid: true,\r\n                        isEasyPaid: false,\r\n                        referrId: this.state.referrId\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    async getUserAddressById(userId) {\r\n        try {\r\n            var addressInBase58 = await Utils.fetchUserAddressById(userId);\r\n            this.setState({ referrAddress: addressInBase58 });\r\n\r\n            if (addressInBase58 === '0x0000000000000000000000000000000000000000') {\r\n                console.log('userAddress is zero, set refer to 0');\r\n                this.setState({ referrId: 0 });\r\n                this.setState({ referrAddress: myConfig.GENESIS_USER });\r\n                this.setState({ referrIdExists: false });\r\n            } else {\r\n                this.setState({ referrAddress: addressInBase58 });\r\n                this.setState({ referrIdExists: true });\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error trying getting address:\");\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n\r\n    handleChange(event) {\r\n        this.setState({ referrId: event.target.value });\r\n        this.getUserAddressById(event.target.value);\r\n    }\r\n\r\n\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.setState({ loader: true });\r\n\r\n        if (this.REGISTRATION_COST_ETH === 0) {\r\n            Swal.fire({\r\n                icon: 'question',\r\n                title: 'Getting registration cost',\r\n                confirmButtonText: 'Ok, I\\'ll retry',\r\n                html: 'Trying to get registration cost from smartcontract, please retry'\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        await Utils.registrationInEth(this.state.referrAddress, this.REGISTRATION_COST_ETH)\r\n            .then(\r\n                result => {\r\n                    Swal.fire({\r\n                        title: 'Success',\r\n                        icon: 'success',\r\n                        html: 'Nice! You will be moved to the second step of registration'\r\n                    }).then((result) => {\r\n                        this.setState({ loader: false });\r\n                        if (this.state.useToken) {\r\n                            this.props.history.push({\r\n                                pathname: '/regfinish',\r\n                                state: {\r\n                                    isEthPaid: true,\r\n                                    isEasyPaid: false\r\n                                }\r\n                            })\r\n                        } else {\r\n                            Swal.fire({\r\n                                title: 'Success',\r\n                                icon: 'success',\r\n                                html: 'Welcome to the INFINITY GLOBAL family! <br>You will be redirected to your dashboard'\r\n                            }).then((result) => {\r\n                                this.setState({ loader: false });\r\n                                this.props.history.push('/dashboard');\r\n                            });\r\n                        }\r\n                    });\r\n                },\r\n                error => {\r\n                    Swal.fire({\r\n                        icon: 'error',\r\n                        title: 'Fail',\r\n                        html: error\r\n                    }).then((result) => {\r\n                        console.log(\"Retry after error\");\r\n                        this.setState({ loader: false });\r\n                    });\r\n                }\r\n            ).catch(error => {\r\n                this.setState({ loader: false });\r\n                console.error(\"INFINITY GLOBAL error\");\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"super_container login-page\">\r\n                <div className=\"login_container\">\r\n                    <img className=\"logo-login\" alt=\"logo\" src={logo} />\r\n                    <p className=\"confirm-hide\" style={{ display: 'none' }}>For access to all the functions of your personal account, use Login:</p>\r\n                    <div id=\"login-btn-metamask\" className=\"login-btn confirm-hide\" style={{ display: 'none' }}>REGISTER/LOGIN</div>\r\n                    <div id=\"confirm-ref\" >\r\n                        <form onSubmit={this.handleSubmit}>\r\n\r\n                            <div className=\"ref-confirm\">\r\n                                <p>Your Sponsor ID</p>\r\n                                <div className=\"form-box\">\r\n                                    <input type=\"number\" id=\"ref-id\" value={this.state.referrId} onChange={this.handleChange} />\r\n                                </div>\r\n                                <div className=\"form-box\">\r\n                                    <input type=\"text\" id=\"ref-wallet\" value={this.state.referrAddress} onChange={this.handleChange2} disabled={true} />\r\n                                </div>\r\n                            </div>\r\n                            <input className=\"login-btn\" id=\"register-btn-confirm\" type=\"submit\" value=\"click to confirm registration\" disabled={this.state.loader} style={{ width: '380px' }} />\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                <div className=\"darkener\" style={{ display: this.state.loader ? 'block' : 'none' }}></div>\r\n                <Loader\r\n                    className=\"loader\"\r\n                    type=\"Oval\"\r\n                    color=\"#00BFFF\"\r\n                    height={100}\r\n                    width={100}\r\n                    visible={this.state.loader}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Registration);","import React from 'react';\r\nimport Swal from 'sweetalert2'; //https://sweetalert2.github.io\r\nimport { myConfig } from '../../config.js';\r\nimport Utils from '../../utils';\r\n\r\n\r\nclass BuyEasy extends React.Component {\r\n    async componentDidUpdate(prevProps) {\r\n    }\r\n\r\n    changeLoader(showLoader) {\r\n        this.props.onLoaderChange(showLoader);\r\n    }\r\n\r\n\r\n    async handleBuyEasy() {\r\n        if (!this.props.viewerAddress) {\r\n            Swal.fire({\r\n                title: 'Connection problem',\r\n                icon: 'warning',\r\n                html: \"<p>Sorry, can't connect to ETHEREUM network.</p> <p>Please connect your Web3 provider <br><i>(<a href='\" + myConfig.METAMASK_URL + \"' target='_blank' rel='noopener noreferrer'>MetaMask</a> or other wallets that support online operations)</i></p>\"\r\n            })\r\n            return;\r\n        }\r\n\r\n        const { value: easyAmount } = await Swal.fire({\r\n            //icon: 'info',\r\n            title: 'Buy IGL',\r\n            input: 'number',\r\n            showCancelButton: true,\r\n            inputValidator: (value) => {\r\n                if (!value) {\r\n                    return 'Entered value is empty or incorrect'\r\n                }\r\n            },\r\n            html: 'Current exchange rate:<br>1 BNB&nbsp;=&nbsp;<b>' + this.props.ETH_TO_EASY + '&nbsp;IGL</b>. <p>How many IGL do you want to purchase</p>'\r\n        })\r\n\r\n        if (easyAmount) {\r\n            let ethAmount = easyAmount / this.props.ETH_TO_EASY;\r\n            Swal.fire({\r\n                title: 'Buy IGL',\r\n                showCancelButton: true,\r\n                confirmButtonText: \"Yes, purchase\",\r\n                html: '<p>Are you sure you want to purchase <b>' + easyAmount + '&nbsp;IGL</b>?<p>It will cost ' + ethAmount + '&nbsp;BNB</p>'\r\n            }).then(result => {\r\n                if (result.isConfirmed)\r\n                    this.buyEasy(easyAmount, ethAmount);\r\n            });\r\n        }\r\n    }\r\n\r\n    async buyEasy(easyAmount, ethAmount) {\r\n        this.changeLoader(true);\r\n\r\n        await Utils.buyEasy((ethAmount * 1000000).toString() + \"000000000000\")\r\n            .then(\r\n                result => {\r\n                    Swal.fire({\r\n                        title: 'Success',\r\n                        icon: 'success',\r\n                        confirmButtonText: 'Great',\r\n                        html: \"Congradulation! You have purchased <b>\" + easyAmount + \"&nbsp;IGL</b>!<p>Add IGL smartcontract address <b>\" + myConfig.CONTRACT_ADDRESS_EASYCOIN + \"</b> to&nbsp;your ETHEREUM wallet</p><p>Current page will be reloaded</p>\"\r\n                    }).then((result) => {\r\n                        this.changeLoader(false);\r\n                        window.location.reload();\r\n                    });\r\n                },\r\n                error => {\r\n                    this.handleErroredTransaction(error, 'Ok, I\\'ll check the result manually', true);\r\n                }\r\n            ).catch(err => {\r\n                this.changeLoader(false);\r\n                console.error(\"Error\");\r\n                console.error(err);\r\n            });\r\n    }\r\n\r\n    handleErroredTransaction(error, okButtonText, doReload = true) {\r\n        Swal.fire({\r\n            icon: 'error',\r\n            title: 'Fail',\r\n            html: error\r\n        }).then((result) => {\r\n            console.log(\"General error\");\r\n            this.changeLoader(false);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"easy-info\">\r\n                <div className=\"easy-balance-label\">{this.props.isRegistered ? \"YOUR\" : \"ACCOUNT\"} BALANCE</div>\r\n                <div className=\"easy-balance\">{this.props.isRegistered\r\n                    ? (this.props.easyBalance !== -1\r\n                        ? (this.props.easyBalance < 1000000\r\n                            ? this.props.easyBalance.toFixed(2) : (this.props.easyBalance / 1000000).toFixed(2) + \"M\")\r\n                        : 0)\r\n                    : (this.props.easyAccountBalance !== -1\r\n                        ? (this.props.easyAccountBalance < 1000000\r\n                            ? this.props.easyAccountBalance.toFixed(2) : (this.props.easyAccountBalance / 1000000).toFixed(2) + \"M\")\r\n                        : 0)}<span>IGL</span></div>\r\n                <div className=\"buy-easy\" onClick={this.handleBuyEasy.bind(this)}>BUY IGL</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BuyEasy;","import React from 'react';\r\nimport Swal from 'sweetalert2'; //https://sweetalert2.github.io\r\nimport Loader from 'react-loader-spinner';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport { myConfig } from '../../config.js';\r\nimport BuyEasy from './../BuyEasy'; \r\nimport logo from '../../assets/nlogo.png';\r\nimport Utils from '../../utils';\r\nimport './Home.scss';\r\n\r\n\r\n\r\nclass Home extends React.Component {\r\n    _isMounted = false;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            viewId: -1,\r\n            isAddressExist: true,\r\n            referrId: 0,\r\n            loader: false,\r\n            isRegistered: true,\r\n            viewerAddress: '',\r\n            easyAccountBalance: 0,\r\n            easyBalance: 0\r\n        };\r\n\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.goToLoginRegister = this.goToLoginRegister.bind(this);\r\n\r\n        if (typeof this.props !== 'undefined' && typeof this.props.match !== 'undefined' && typeof this.props.match.params !== 'undefined' && typeof this.props.match.params.id && this.props.match.params.id != null) {\r\n            this.state.referrId = this.props.match.params.id;\r\n            console.log(\"Referr id: \" + this.props.match.params.id);\r\n        } else {\r\n            this.state.referrId = 0;\r\n            console.log(\"Referr id not defined\");\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await Utils.setWeb3(window);\r\n\r\n        this.initData();\r\n    }\r\n\r\n    async initData() {\r\n        this.setState({viewerAddress : Utils.getCurrentUserAddress() });\r\n\r\n        this.initEthToEasyExchangeRate();\r\n        this.initEasyBalance();\r\n    }\r\n\r\n    async initEthToEasyExchangeRate() {\r\n        let rate = await Utils.getExchangeRate();\r\n\r\n        if (rate !== null) {\r\n            this.setState({ ETH_TO_EASY: rate });\r\n        }\r\n    }\r\n\r\n    async initEasyBalance() {\r\n        let easyBalance = await Utils.getEasyBalanceByUser();\r\n        if (easyBalance === null) return;\r\n        this.setState({ easyBalance: easyBalance });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n    }\r\n\r\n    async handleInputChange(event) {\r\n        let input = event.target.value;\r\n\r\n        if (!input) {\r\n            this.setState({ viewId: -1 });\r\n        } else if (!isNaN(parseInt(input))) {\r\n            if (await Utils.getUserAddressById(input) !== '410000000000000000000000000000000000000000') {\r\n                this.setState({ viewId: input });\r\n            } else {\r\n                this.setState({ viewId: '' });\r\n            }\r\n        } else {\r\n            let user = await Utils.getCleanUser(input);\r\n            if (user !== null && user.userId !== 0) {\r\n                this.setState({ viewId: user.userId });\r\n            } else {\r\n                this.setState({ viewId: '' });\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        if (this.state.viewId && this.state.viewId !== -1) {\r\n            window.location.replace('/dashboard/' + this.state.viewId);\r\n        }\r\n    }\r\n\r\n    async goToLoginRegister(event) {\r\n        event.preventDefault();\r\n\r\n        if (await Utils.isCurrentUserExists()) {\r\n            this.props.history.push({\r\n                pathname: '/dashboard',\r\n                state: {}\r\n            })\r\n        } else {\r\n            let payment = await Utils.getPaymentStatusForCurrentUser();\r\n\r\n            if (payment == null) {\r\n                Swal.fire({\r\n                    title: 'Connection problem',\r\n                    icon: 'error',\r\n                    html: \"<p>Sorry, can't connect to ETHEREUM network.</p> <p>Please connect your Web3 provider <br><i>(<a href='\" + myConfig.METAMASK_URL + \"' target='_blank' rel='noopener noreferrer'>MetaMask</a> or other wallets that support online operations)</i></p>\"\r\n                })\r\n                return;\r\n            }\r\n\r\n            if (!payment.isEthPaid && !payment.isTokensPaid) {\r\n                this.props.history.push({\r\n                    pathname: '/register',\r\n                    state: {\r\n                        isEthPaid: false,\r\n                        isEasyPaid: false,\r\n                        referrId: this.state.referrId\r\n                    }\r\n                })\r\n            } else if (!payment.isEthPaid && payment.isTokensPaid) {\r\n                console.log(\"Go to first step, but with paid tokens\");\r\n                this.props.history.push({\r\n                    pathname: '/register',\r\n                    state: {\r\n                        isEthPaid: false,\r\n                        isEasyPaid: true,\r\n                        referrId: this.state.referrId\r\n                    }\r\n                })\r\n            } else if (payment.isEthPaid && !payment.isTokensPaid) {\r\n                this.props.history.push({\r\n                    pathname: '/regfinish',\r\n                    state: {\r\n                        isEthPaid: true,\r\n                        isEasyPaid: false,\r\n                        referrId: this.state.referrId\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    onLoaderChange(showLoader) {\r\n        if (typeof showLoader === 'boolean' && showLoader !== null) {\r\n            this.setState({ loader: showLoader });\r\n        } else {\r\n            this.setState({ loader: !this.state.loader });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='super_container text-center home-container'>\r\n                <BuyEasy\r\n                    onLoaderChange={this.onLoaderChange.bind(this)}\r\n                    isRegistered={this.state.isRegistered}\r\n                    viewerAddress={this.state.viewerAddress}\r\n                    easyAccountBalance={this.state.easyAccountBalance}\r\n                    easyBalance={this.state.easyBalance}\r\n                    ETH_TO_EASY={this.state.ETH_TO_EASY}\r\n                />\r\n                <div className=\"login_container\">\r\n                    <img className=\"logo-login\" alt=\"logo\" src={logo} />\r\n                    <p className=\"confirm-hide\">For access to all the functions of your personal account, use Login:</p>\r\n                    <div id=\"login-btn-metamask\" className=\"login-btn confirm-hide\" onClick={this.goToLoginRegister}>REGISTER/LOGIN</div>\r\n\r\n                    <form className=\"confirm-hide\" onSubmit={this.handleSubmit}>\r\n                        <label>For viewing mode enter ID or wallet</label>\r\n                        <input type=\"text\" id=\"view-id\" onChange={this.handleInputChange} />\r\n                        <p className=\"error\" style={{ display: this.state.viewId ? 'none' : 'block' }} >No user or incorrect input</p>\r\n                        <input className={\"blueButton\" + (this.state.viewId && this.state.viewId !== -1 ? \"\" : \" disabled\")} id=\"view-dashboard\" type=\"submit\" value=\"VIEWING\" />\r\n                    </form>\r\n                </div>\r\n                <Link to={'/admin'} className=\"admin-link\">Admin Panel</Link>\r\n                <div className=\"darkener\" style={{ display: this.state.loader ? 'block' : 'none' }}></div>\r\n                <Loader\r\n                    className=\"loader\"\r\n                    type=\"Oval\"\r\n                    color=\"#00BFFF\"\r\n                    height={100}\r\n                    width={100}\r\n                    visible={this.state.loader}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(Home);","import React from 'react';\r\nimport Swal from 'sweetalert2'; //https://sweetalert2.github.io\r\nimport { myConfig } from '../../config.js';\r\nimport Utils from '../../utils';\r\nimport './Admin.scss';\r\n\r\nclass EasyAdmin extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n\r\n        this.state = {\r\n            exchangeRate: 0,\r\n            exchangeRateCandidate: 0,\r\n            newOwnerCandidate: '',\r\n            balance: 0,\r\n            transferAmount: 0,\r\n            transferAddress: ''\r\n        }\r\n\r\n        this.initData();\r\n    }\r\n\r\n    changeLoader(show) {\r\n        this.props.onLoaderChange(show);\r\n    }\r\n\r\n    async initData() {\r\n        this.getExchangeRate();\r\n        this.getBalance();\r\n    }\r\n\r\n    // #region INIT\r\n    async getExchangeRate() {\r\n        let exchangeRate = await Utils.getExchangeRate();\r\n        if (exchangeRate !== null) {\r\n            this.setState({ exchangeRate: exchangeRate });\r\n        }\r\n    }\r\n\r\n    async getBalance() {\r\n        let balance = await Utils.getEasyEthBalance();\r\n\r\n        if (typeof balance !== 'undefined' && balance !== null && balance > 0) {\r\n            this.setState({ balance: balance / 1000000000000000000 });\r\n        }\r\n    }\r\n    // #endregion\r\n\r\n    // #region EXCHANGE RATE\r\n    handleExchangeRateValueChange(event) {\r\n        if (event.target.value <= 0) return;\r\n\r\n        this.setState({ exchangeRateCandidate: parseInt(event.target.value) });\r\n    }\r\n\r\n    async handleChageExchangeRate() {\r\n        if (typeof this.state.exchangeRateCandidate === 'undefined' || this.state.exchangeRateCandidate === null || this.state.exchangeRateCandidate === 0) {\r\n            Swal.fire({\r\n                icon: 'warning',\r\n                title: 'Not correct value',\r\n                text: 'New exchange rate should be greater then 0'\r\n            })\r\n            return;\r\n        }\r\n\r\n        this.changeLoader(true);\r\n\r\n        Swal.fire({\r\n            icon: 'question',\r\n            title: 'Confirm BNB/IGL exchange rate change?',\r\n            showCancelButton: true,\r\n            html: 'Are you sure you want to change BNB/IGL exchange rate to <b>' + this.state.exchangeRateCandidate + \"</b> (1 BNB = \" + this.state.exchangeRateCandidate + \" EASY <br>(old exchange rate is <b>\" + this.state.exchangeRate + \"</b>)\"\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                this.chageExchangeRate();\r\n            } else {\r\n                this.changeLoader(false);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    async chageExchangeRate() {\r\n        await Utils.changeExchangeRate(this.state.exchangeRateCandidate)\r\n            .then(\r\n                result => {\r\n                    console.log(result);\r\n                    Swal.fire({\r\n                        icon: 'success',\r\n                        title: 'Success',\r\n                        html: 'Nice! BNB/IGL exchange rate has been changed to <b>' + this.state.exchangeRateCandidate + '</b>. <br>Current page will be reloaded'\r\n                    }).then(result => {\r\n                        this.changeLoader(false);\r\n                        window.location.reload();\r\n                    });\r\n                },\r\n                error => {\r\n                    Swal.fire({\r\n                        icon: 'error',\r\n                        title: 'Fail',\r\n                        html: error\r\n                    }).then(result => {\r\n                        this.changeLoader(false);\r\n                    });\r\n                }\r\n            ).catch(error => {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Fail',\r\n                    html: error\r\n                });\r\n                console.log(\"Error\");\r\n                console.error(error);\r\n            });;\r\n    }\r\n    // #endregion\r\n\r\n    // #region TRANSFER\r\n    handleTransferAmountChange(event) {\r\n        let transferAmount = event.target.value;\r\n\r\n        if (transferAmount <= 0) return;\r\n\r\n        if (transferAmount > this.state.balance) {\r\n            Swal.fire({\r\n                icon: 'warning',\r\n                title: 'Not enough funds',\r\n                text: 'Contract balance is <b>' + this.state.balance + ' ETH</b>, and it\\'s less than the entered transfer amount ' + transferAmount + ' ETH'\r\n            })\r\n            return;\r\n        } else {\r\n            this.setState({ transferAmount: parseFloat(event.target.value) });\r\n        }\r\n    }\r\n\r\n    async handleTransferAddressChange(event) {\r\n        let transferAddress = event.target.value;\r\n\r\n        if (await Utils.isValidAddress(transferAddress)) {\r\n            this.setState({ transferAddress: transferAddress });\r\n        } else {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Not valid address',\r\n                html: 'Sorry, but provided input data <b>' + transferAddress + \"</b> is not a valid ETHEREUM address\"\r\n            });\r\n        }\r\n    }\r\n\r\n    async handleTransfer() {\r\n        if (this.state.transferAmount > this.state.balance) {\r\n            Swal.fire({\r\n                icon: 'warning',\r\n                title: 'Not enough funds',\r\n                text: 'Contract balance is less than the entered transfer amount'\r\n            })\r\n            return;\r\n        }\r\n\r\n        if (!this.state.transferAddress) {\r\n            Swal.fire({\r\n                icon: 'warning',\r\n                title: 'Not correct address',\r\n                text: 'Not valid recipient ETHEREUM address'\r\n            })\r\n            return;\r\n        }\r\n\r\n        this.changeLoader(true);\r\n\r\n        Swal.fire({\r\n            icon: 'question',\r\n            title: 'Confirm transfer funds',\r\n            showCancelButton: true,\r\n            html: 'Are you sure you want to transfer <b>' + this.state.transferAmount + \" ETH</b> from <b>IGL&nbsp;smartcontract</b> to <b>\" + this.state.transferAddress + \"</b> address? This action is irreversible!\"\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                this.transferFunds();\r\n            } else {\r\n                this.changeLoader(false);\r\n            }\r\n        });\r\n    }\r\n\r\n    async transferFunds() {\r\n        await Utils.transferFundsFromEasy(this.state.transferAddress, (this.state.transferAmount * 1000000).toString() + \"000000000000\")\r\n            .then(\r\n                result => {\r\n                    console.log(result);\r\n                    Swal.fire({\r\n                        icon: 'success',\r\n                        title: 'Success',\r\n                        html: 'Nice! <b>' + this.state.transferAmount + 'BNB</b>s were transfered to <b>' + this.state.transferAddress + '</b>. '\r\n                    }).then(result => {\r\n                        this.changeLoader(false);\r\n                    });\r\n                },\r\n                error => {\r\n                    Swal.fire({\r\n                        icon: 'error',\r\n                        title: 'Fail',\r\n                        html: error\r\n                    }).then(result => {\r\n                        this.changeLoader(false);\r\n                    });\r\n                }\r\n            ).catch(error => {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Fail',\r\n                    html: error\r\n                }).then(result => {\r\n                    this.changeLoader(false);\r\n                });\r\n                console.log(\"Error\");\r\n                console.error(error);\r\n            });\r\n    }\r\n    // #endregion\r\n\r\n    // #region CHANGE OWNER\r\n    async handleNewOwnerValueChange(event) {\r\n        let address = event.target.value;\r\n        if (await Utils.isValidAddress(address)) {\r\n            this.setState({ newOwnerCandidate: address });\r\n        } else {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Not valid address',\r\n                html: 'Sorry, but provided input data <b>' + address + \"</b> is not a valid ETHEREUM address\"\r\n            });\r\n        }\r\n    }\r\n\r\n    async handleChangeOwner() {\r\n        if (!this.state.newOwnerCandidate) {\r\n            Swal.fire({\r\n                icon: 'warning',\r\n                title: 'Not correct value',\r\n                text: 'Not valid ETHEREUM address'\r\n            })\r\n            return;\r\n        }\r\n\r\n        this.changeLoader(true);\r\n\r\n        Swal.fire({\r\n            icon: 'question',\r\n            title: 'Confirm owner change',\r\n            showCancelButton: true,\r\n            html: 'Are you sure you want to change <b>IGL contract</b> owner to <b>' + this.state.newOwnerCandidate + \"</b> <br>(current contract owner is <i>\" + this.props.owner + \"</i>)\"\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                this.chageOwner();\r\n            } else {\r\n                this.changeLoader(false);\r\n            }\r\n        });\r\n    }\r\n\r\n    async chageOwner() {\r\n        await Utils.changeOwner(this.state.newOwnerCandidate, myConfig.CONTRACT_ADDRESS_EASYCOIN)\r\n            .then(\r\n                result => {\r\n                    console.log(result);\r\n                    Swal.fire({\r\n                        icon: 'success',\r\n                        title: 'Success',\r\n                        html: 'Nice! IGL contract ownership has been transfered to <b>' + this.state.newOwnerCandidate + '</b>. <p>New contract owner must login to this page and accept ownership, meanwhile <b>' + this.props.owner + '</b> will stay the contract owner</p><p>Current page will be reloaded</b>'\r\n                    }).then(result => {\r\n                        this.changeLoader(false);\r\n                        window.location.reload();\r\n                    });\r\n                },\r\n                error => {\r\n                    Swal.fire({\r\n                        icon: 'error',\r\n                        title: 'Fail',\r\n                        html: error\r\n                    }).then(result => {\r\n                        this.changeLoader(false);\r\n                    });\r\n                }\r\n            ).catch(error => {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Fail',\r\n                    html: error\r\n                }).then(result => {\r\n                    this.changeLoader(false);\r\n                });\r\n                console.log(\"Error\");\r\n                console.error(error);\r\n            });\r\n    }\r\n    // #endregion\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"admin-sub-block\">\r\n                <h1>IGL ADMIN</h1>\r\n                <p>Contract address:\r\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" href={myConfig.ETHERSCAN_DOMAIN + \"address/\" + myConfig.CONTRACT_ADDRESS_EASYCOIN}>{myConfig.CONTRACT_ADDRESS_EASYCOIN}</a>\r\n                </p>\r\n                <h3>Exchange rate</h3>\r\n                <div className=\"data-change-container\">\r\n                    <div className=\"subDiv\">\r\n                        <label>\r\n                            CURRENT EXCHANGE RATE:\r\n                        </label>\r\n                        <div className=\"num-value\">\r\n                            {this.state.exchangeRate} BNB/IGL\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"subDiv\">\r\n                        <label>\r\n                            NEW EXCHANGE RATE:\r\n                        </label>\r\n                        <input type=\"number\" className=\"numberInput\" step=\"1\" onChange={this.handleExchangeRateValueChange.bind(this)} />\r\n                        <div> BNB</div>\r\n                        <div className=\"confirm-button\" onClick={this.handleChageExchangeRate.bind(this)}>Change</div>\r\n                    </div>\r\n                </div>\r\n\r\n                <h3>IGL token contract funds</h3>\r\n                <div className=\"data-change-container\">\r\n                    <div className=\"subDiv\">\r\n                        <label>\r\n                            TOTAL IGL CONTRACT BALANCE:\r\n                        </label>\r\n                        <div className=\"num-value\">\r\n                            {this.state.balance} BNB\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"subDiv\">\r\n                        <label>\r\n                            TRANSFER AMOUNT:\r\n                        </label>\r\n                        <input type=\"number\" className=\"numberInput\" onChange={this.handleTransferAmountChange.bind(this)} />\r\n                        <div> BNB</div>\r\n                    </div>\r\n                    <div className=\"subDiv\">\r\n                        <label className=\"short\">\r\n                            TRANSFER TO:\r\n                        </label>\r\n                        <input type=\"text\" className=\"numberInput long\" value={this.state.transferAddress} onChange={this.handleTransferAddressChange.bind(this)} />\r\n                        <div className=\"confirm-button\" onClick={this.handleTransfer.bind(this)}>Transfer</div>\r\n                    </div>\r\n                </div>\r\n\r\n                <h3>IGL smartcontract owner</h3>\r\n                <div className=\"data-change-container\">\r\n                    <div className=\"subDiv\">\r\n                        <label className=\"short\">\r\n                            CURRENT OWNER:\r\n                        </label>\r\n                        <div className=\"num-value\">\r\n                            {this.props.owner}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"subDiv\" style={{ display: this.props.unaccaptedOwner ? 'flex' : 'none' }}>\r\n                        <label className=\"short\">\r\n                            UNACCAPTED NEW OWNER:\r\n                        </label>\r\n                        <div className=\"num-value\">\r\n                            {this.props.unaccaptedOwner}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"subDiv\">\r\n                        <label className=\"short\">\r\n                            NEW OWNER:\r\n                        </label>\r\n                        <input type=\"text\" className=\"numberInput long\" value={this.state.referrId} onChange={this.handleNewOwnerValueChange.bind(this)} />\r\n                        <div className=\"confirm-button\" onClick={this.handleChangeOwner.bind(this)}>Change</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default EasyAdmin;","import React from 'react';\r\nimport Swal from 'sweetalert2'; //https://sweetalert2.github.io\r\nimport { myConfig } from '../../config.js';\r\nimport Utils from '../../utils';\r\nimport './Admin.scss';\r\n\r\nclass AcceptOwnership extends React.Component {\r\n    changeLoader(show) {\r\n        this.props.onLoaderChange(show);\r\n    }\r\n\r\n    async handleAcceptOwnership() {\r\n        this.changeLoader(true);\r\n\r\n        Swal.fire({\r\n            icon: 'question',\r\n            title: 'Confirm ownership acceptance',\r\n            showCancelButton: true,\r\n            html: 'Are you sure you want to accept the ownership of the <b>' + this.props.contractName + ' smartcontract</b> <br>(address <i>' + this.props.contractAddress + \"</i>)?\"\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                this.acceptOwnership();\r\n            } else {\r\n                this.changeLoader(false);\r\n            }\r\n        });\r\n    }\r\n\r\n    async acceptOwnership() {\r\n        await Utils.acceptOwnership(this.props.contractAddress)\r\n            .then(\r\n                result => {\r\n                    console.log(result);\r\n                    Swal.fire({\r\n                        icon: 'success',\r\n                        title: 'Success',\r\n                        html: 'Nice! Ownership of the ' + this.props.contractName + ' smartcontract (address <i>' + this.props.contractAddress + \"</i>) has been approved. <br>Current page will be reloaded\"\r\n                    }).then(result => {\r\n                        this.changeLoader(false);\r\n                        window.location.reload();\r\n                    });\r\n                },\r\n                error => {\r\n                    console.error(error);\r\n                    Swal.fire({\r\n                        icon: 'error',\r\n                        title: 'Fail',\r\n                        html: error\r\n                    }).then(result => {\r\n                        this.changeLoader(false);\r\n                    });\r\n                }\r\n            ).catch(error => {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Fail',\r\n                    html: error\r\n                }).then(result => { this.changeLoader(false); });\r\n                console.log(\"Error\");\r\n                console.error(error);\r\n\r\n            });;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"admin-sub-block\">\r\n                <h3>{this.props.contractName} ownership acceptance</h3>\r\n                <p>Contract address:\r\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" href={myConfig.ETHERSCAN_DOMAIN + \"address/\" + this.props.contractAddress}>{this.props.contractAddress}</a>\r\n                </p>\r\n                <div className=\"data-change-container\">\r\n                    <div className=\"subDiv\">\r\n                        <label className=\"short\">\r\n                            CURRENT OWNER:\r\n                        </label>\r\n                        <div className=\"num-value\">\r\n                            {this.props.owner}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"subDiv\" style={{ display: this.props.unaccaptedOwner ? 'flex' : 'none' }}>\r\n                        <label className=\"short\">\r\n                            UNACCAPTED NEW OWNER:\r\n                        </label>\r\n                        <div className=\"num-value\">\r\n                            {this.props.unaccaptedOwner}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"subDiv\">\r\n                        <p>Hello! Previous <b>{this.props.contractName} smartcontract</b> owner <i>{this.props.owner}</i>    transferred ownership of this smartcontract to you. If you want to accept it just click \"Accept ownership\" button</p>\r\n                        <div className=\"confirm-button\" onClick={this.handleAcceptOwnership.bind(this)}>Accept ownership</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default AcceptOwnership;","import React from 'react';\r\nimport './Admin.scss';\r\n\r\nclass NotLoggedIn extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"admin-dummy\">\r\n                <h2>Not {this.props.contractName} contract owner</h2>\r\n                <p>Hello! Unfortunately, you are not {this.props.contractName} contract owner. </p>\r\n                <p>Contract owner: <b>{this.props.owner}</b></p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default NotLoggedIn;","import React from 'react';\r\nimport Swal from 'sweetalert2'; //https://sweetalert2.github.io\r\nimport { myConfig } from '../../config.js';\r\nimport Utils from '../../utils';\r\nimport './Admin.scss';\r\n\r\n\r\nclass HpEasyAdmin extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n\r\n        this.state = {\r\n            balance: 0,\r\n            useToken: true,\r\n            transferAmount: 0,\r\n            transferAddress: '',\r\n            registrationCost: 0,\r\n            registrationCostCandidate: 0,\r\n            bunchCyclesLimit: 0,\r\n            bunchCyclesLimitCandidate: 0,\r\n            owner: '',\r\n            newOwnerCandidate: '',\r\n            lastCycle: '',\r\n            skippedHpEasysOffset: '',\r\n            nextCycleMatrix: '',\r\n            nextCycleHp: '',\r\n            jackpotLoad: [],\r\n        }\r\n\r\n        this.initData();\r\n    }\r\n\r\n    changeLoader(show) {\r\n        this.props.onLoaderChange(show);\r\n    }\r\n\r\n    async initData() {\r\n        this.getRegistrationCost();\r\n        this.getUseToken();\r\n        this.getBunchCyclesLimit();\r\n        this.getCyclesInfo();\r\n        this.getBalance();\r\n    }\r\n\r\n    // #region INIT\r\n    async getRegistrationCost() {\r\n        let registrationCost = await Utils.getRegistrationCost();\r\n        if (registrationCost !== null) {\r\n            this.setState({ registrationCost: registrationCost });\r\n        }\r\n    }\r\n\r\n    async getUseToken() {\r\n        let useToken = await Utils.getUseToken();\r\n        if (useToken === null) return;\r\n        this.setState({ useToken: useToken });\r\n    }\r\n\r\n    async getBunchCyclesLimit() {\r\n        let bunchCyclesLimit = await Utils.getBunchCyclesLimit();\r\n        if (bunchCyclesLimit !== null) {\r\n            this.setState({ bunchCyclesLimit: bunchCyclesLimit });\r\n        }\r\n    }\r\n\r\n    async getCyclesInfo() {\r\n        let lastCycle = await Utils.getLastCycle();\r\n        if (lastCycle === null) return;\r\n        this.setState({ lastCycle: lastCycle });\r\n\r\n        let skippedHpEasysOffset = await Utils.getSkippedHpsOffset();\r\n        if (skippedHpEasysOffset === null) return;\r\n        this.setState({ skippedHpEasysOffset: skippedHpEasysOffset });\r\n\r\n        let nextCycleHPId = lastCycle + skippedHpEasysOffset;\r\n        let nextCycleHp = await Utils.getHpEasy(nextCycleHPId);\r\n        let nextCycleUser = await Utils.getUserByAddressClean(nextCycleHp.owner);\r\n\r\n        this.setState({ nextCycleHp: nextCycleHPId });\r\n        this.setState({ nextCycleMatrix: nextCycleHp.matrixId });\r\n        this.setState({ nextCycleUser: nextCycleUser.userId });\r\n    }\r\n\r\n    async getBalance() {\r\n        let balance = await Utils.getHpEthBalance();\r\n\r\n        if (typeof balance !== 'undefined' && balance !== null && balance > 0) {\r\n            this.setState({ balance: balance / 1000000000000000000 });\r\n        }\r\n    }\r\n    // #endregion\r\n\r\n    async showGeneralError(error) {\r\n        if (typeof error !== 'string') console.error(error);\r\n\r\n        Swal.fire({\r\n            icon: 'error',\r\n            title: 'Fail',\r\n            html: error\r\n        }).then(result => {\r\n            this.changeLoader(false);\r\n        });\r\n    }\r\n\r\n    async showCatchError(error) {\r\n        Swal.fire({\r\n            icon: 'error',\r\n            title: 'Fail',\r\n            html: error\r\n        });\r\n        console.log(\"Error\");\r\n        console.error(error);\r\n    }\r\n\r\n    // #region REGISTRATION COST\r\n    handleRegistrationCostValueChange(event) {\r\n        if (event.target.value <= 0) return;\r\n\r\n        this.setState({ registrationCostCandidate: parseFloat(event.target.value) });\r\n    }\r\n\r\n    async handleChageRegistrationCost() {\r\n        if (typeof this.state.registrationCostCandidate === 'undefined' || this.state.registrationCostCandidate === null || this.state.registrationCostCandidate === 0) {\r\n            Swal.fire({\r\n                icon: 'warning',\r\n                title: 'Not correct value',\r\n                text: 'New registration cost should be greater then 0'\r\n            })\r\n            return;\r\n        }\r\n\r\n        this.changeLoader(true);\r\n\r\n        Swal.fire({\r\n            icon: 'question',\r\n            title: 'Confirm registration cost change',\r\n            showCancelButton: true,\r\n            html: 'Are you sure you want to change registration price to <b>' + this.state.registrationCostCandidate + \" BNB/IGL</b> <br>(old registration cost is <i><b>\" + this.state.registrationCost / 1000000000000000000 + \"BNB/IGL</b></i>)\"\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                this.chageRegistrationCost();\r\n            } else {\r\n                this.changeLoader(false);\r\n            }\r\n        });\r\n    }\r\n\r\n    async chageRegistrationCost() {\r\n        await Utils.changeRegistrationCost((this.state.registrationCostCandidate * 1000000).toString() + \"000000000000\")\r\n            .then(\r\n                result => {\r\n                    console.log(result);\r\n                    Swal.fire({\r\n                        icon: 'success',\r\n                        title: 'Success',\r\n                        html: 'Nice! Registration cost has been changed to ' + this.state.registrationCostCandidate + ' BNB/IGL. <br>Current page will be reloaded'\r\n                    }).then(result => {\r\n                        this.changeLoader(false);\r\n                        window.location.reload();\r\n                    });\r\n                },\r\n                error => {\r\n                    this.showGeneralError(error);\r\n                }\r\n            ).catch(error => {\r\n                this.showCatchError(error);\r\n            });;\r\n    }\r\n    // #endregion\r\n\r\n    // #region BUNCH CYCLES\r\n    handleBunchCyclesValueChange(event) {\r\n        if (event.target.value <= 0) return;\r\n\r\n        this.setState({ bunchCyclesLimitCandidate: parseInt(event.target.value) });\r\n    }\r\n\r\n    async handleChageBunchCycles() {\r\n        if (typeof this.state.bunchCyclesLimitCandidate === 'undefined' || this.state.bunchCyclesLimitCandidate === null || this.state.bunchCyclesLimitCandidate === 0) {\r\n            Swal.fire({\r\n                icon: 'warning',\r\n                title: 'Not correct value',\r\n                text: 'Bunch cycles limit should be greater then 0'\r\n            })\r\n            return;\r\n        }\r\n\r\n        this.changeLoader(true);\r\n\r\n        Swal.fire({\r\n            icon: 'question',\r\n            title: 'Confirm bunch cycles limit change',\r\n            showCancelButton: true,\r\n            html: 'Are you sure you want to change bunch cycles limit to <b>' + this.state.bunchCyclesLimitCandidate + \"</b> <br>(old bunch cycles limit is <i><b>\" + this.state.bunchCyclesLimit + \"</b></i>)\"\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                this.changeBunchCyclesLimit();\r\n            } else {\r\n                this.changeLoader(false);\r\n            }\r\n        });\r\n    }\r\n\r\n    async changeBunchCyclesLimit() {\r\n        await Utils.changeBunchCyclesLimit(this.state.bunchCyclesLimitCandidate)\r\n            .then(\r\n                result => {\r\n                    console.log(result);\r\n                    Swal.fire({\r\n                        icon: 'success',\r\n                        title: 'Success',\r\n                        html: 'Nice! Bunch cycles limit has been changed to ' + this.state.bunchCyclesLimitCandidate + '. <br>Current page will be reloaded'\r\n                    }).then(result => {\r\n                        this.changeLoader(false);\r\n                        window.location.reload();\r\n                    });\r\n                },\r\n                error => {\r\n                    this.showGeneralError(error);\r\n                }\r\n            ).catch(error => {\r\n                this.showCatchError(error);\r\n            });;\r\n    }\r\n    // #endregion\r\n\r\n    // #region TRANSFER\r\n    handleTransferAmountChange(event) {\r\n        let transferAmount = event.target.value;\r\n\r\n        if (transferAmount <= 0) return;\r\n\r\n        if (transferAmount > this.state.balance) {\r\n            Swal.fire({\r\n                icon: 'warning',\r\n                title: 'Not enough funds',\r\n                text: 'Contract balance is <b>' + this.state.balance + ' BNB</b>, and it\\'s less than the entered transfer amount ' + transferAmount + ' ETH'\r\n            })\r\n            return;\r\n        } else {\r\n            this.setState({ transferAmount: parseFloat(event.target.value) });\r\n        }\r\n    }\r\n\r\n    async handleTransferAddressChange(event) {\r\n        let transferAddress = event.target.value;\r\n\r\n        if (await Utils.isValidAddress(transferAddress)) {\r\n            this.setState({ transferAddress: transferAddress });\r\n        } else {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Not valid address',\r\n                html: 'Sorry, but provided input data <b>' + transferAddress + \"</b> is not a valid ETHEREUM address\"\r\n            });\r\n        }\r\n    }\r\n\r\n    async handleTransfer() {\r\n        if (this.state.transferAmount > this.state.balance) {\r\n            Swal.fire({\r\n                icon: 'warning',\r\n                title: 'Not enough funds',\r\n                text: 'Contract balance is less than the entered transfer amount'\r\n            })\r\n            return;\r\n        }\r\n\r\n        if (!this.state.transferAddress) {\r\n            Swal.fire({\r\n                icon: 'warning',\r\n                title: 'Not correct address',\r\n                text: 'Not valid recipient ETHEREUM address'\r\n            })\r\n            return;\r\n        }\r\n\r\n        this.changeLoader(true);\r\n\r\n        Swal.fire({\r\n            icon: 'question',\r\n            title: 'Confirm transfer funds',\r\n            showCancelButton: true,\r\n            html: 'Are you sure you want to transfer <b>' + this.state.transferAmount + \" ETH</b> from <b>IGL&nbsp;smartcontract</b> to <b>\" + this.state.transferAddress + \"</b> address? This action is irreversible!\"\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                this.transferFunds();\r\n            } else {\r\n                this.changeLoader(false);\r\n            }\r\n        });\r\n    }\r\n\r\n    async transferFunds() {\r\n        await Utils.transferFundsFromHpEasy(this.state.transferAddress, (this.state.transferAmount * 1000000).toString() + \"000000000000\")\r\n            .then(\r\n                result => {\r\n                    console.log(result);\r\n                    Swal.fire({\r\n                        icon: 'success',\r\n                        title: 'Success',\r\n                        html: 'Nice! <b>' + this.state.transferAmount + 'BNB</b>s were transfered to <b>' + this.state.transferAddress + '</b>. '\r\n                    }).then(result => {\r\n                        this.changeLoader(false);\r\n                    });\r\n                },\r\n                error => {\r\n                    Swal.fire({\r\n                        icon: 'error',\r\n                        title: 'Fail',\r\n                        html: error\r\n                    }).then(result => {\r\n                        this.changeLoader(false);\r\n                    });\r\n                }\r\n            ).catch(error => {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Fail',\r\n                    html: error\r\n                }).then(result => {\r\n                    this.changeLoader(false);\r\n                });\r\n                console.log(\"Error\");\r\n                console.error(error);\r\n            });\r\n    }\r\n    // #endregion\r\n\r\n    // #region NEW OWNER\r\n\r\n    async handleChageUseToken(event) {\r\n        Swal.fire({\r\n            icon: 'question',\r\n            title: 'Confirm token use change police',\r\n            showCancelButton: true,\r\n            html: 'Are you sure you want to change token use policy? <br></i>(current token policy is <b>' + (this.state.useToken ?  '' : 'not') + ' to use</b> IGL COIN as payment method</i>)'\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                this.chageUseToken();\r\n            } else {\r\n                this.changeLoader(false);\r\n            }\r\n        });\r\n    }\r\n\r\n    async chageUseToken() {\r\n        await Utils.changeUseToken()\r\n            .then(\r\n                result => {\r\n                    console.log(result);\r\n                    Swal.fire({\r\n                        icon: 'success',\r\n                        title: 'Success',\r\n                        html: 'Nice! IGL COIN use policy has been changed!<br>Current page will be reloaded'\r\n                    }).then(result => {\r\n                        this.changeLoader(false);\r\n                        window.location.reload();\r\n                    });\r\n                },\r\n                error => {\r\n                    this.showGeneralError(error);\r\n                }\r\n            ).catch(error => {\r\n                this.showCatchError(error);\r\n            });;\r\n    }\r\n    // #endregion\r\n\r\n    // #region NEW OWNER\r\n    async handleNewOwnerValueChange(event) {\r\n        let address = event.target.value;\r\n        if (await Utils.isValidAddress(address)) {\r\n            this.setState({ newOwnerCandidate: address });\r\n        } else {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Not valid address',\r\n                html: 'Sorry, but provided input data <b>' + address + \"</b> is not a valid ETHEREUM address\"\r\n            });\r\n        }\r\n    }\r\n\r\n    async handleChangeOwner() {\r\n        if (!this.state.newOwnerCandidate) {\r\n            Swal.fire({\r\n                icon: 'warning',\r\n                title: 'Not correct value',\r\n                text: 'Not valid ETHEREUM address'\r\n            })\r\n            return;\r\n        }\r\n\r\n        this.changeLoader(true);\r\n\r\n        Swal.fire({\r\n            icon: 'question',\r\n            title: 'Confirm owner change',\r\n            showCancelButton: true,\r\n            html: 'Are you sure you want to change <b>INFINITY GLOBAL contract</b> owner to <b>' + this.state.newOwnerCandidate + \"</b> <br>(current contract owner is <i>\" + this.props.owner + \"</i>)\"\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                this.chageOwner();\r\n            } else {\r\n                this.changeLoader(false);\r\n            }\r\n        });\r\n    }\r\n\r\n    async chageOwner() {\r\n        await Utils.changeOwner(this.state.newOwnerCandidate, myConfig.CONTRACT_ADDRESS_HPEASY)\r\n            .then(\r\n                result => {\r\n                    console.log(result);\r\n                    Swal.fire({\r\n                        icon: 'success',\r\n                        title: 'Success',\r\n                        html: 'Nice! INFINITY GLOBAL contract ownership has been transfered to <b>' + this.state.newOwnerCandidate + '</b>. <br>New contract owner must login to this page and accept ownership, meanwhile <b>' + this.props.owner + '</b> will stay the contract owner<br>Current page will be reloaded'\r\n                    }).then(result => {\r\n                        this.changeLoader(false);\r\n                        window.location.reload();\r\n                    });\r\n                },\r\n                error => {\r\n                    this.showGeneralError(error);\r\n                }\r\n            ).catch(error => {\r\n                this.showCatchError(error);\r\n            });;\r\n    }\r\n    // #endregion\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"admin-sub-block\">\r\n                <h1>INFINITY GLOBAL ADMIN</h1>\r\n                <p>Contract address:\r\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" href={myConfig.ETHERSCAN_DOMAIN + \"address/\" + myConfig.CONTRACT_ADDRESS_HPEASY}>{myConfig.CONTRACT_ADDRESS_HPEASY}</a>\r\n                </p>\r\n\r\n                <h3>Registration cost</h3>\r\n                <div className=\"data-change-container\">\r\n                    <div className=\"subDiv\">\r\n                        <label>\r\n                            CURRENT REGISTRATION COST:\r\n                        </label>\r\n                        <div className=\"num-value\">\r\n                            {this.state.registrationCost / 1000000000000000000} BNB/IGL\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"subDiv\">\r\n                        <label>\r\n                            NEW REGISTRATION COST:\r\n                        </label>\r\n                        <input type=\"number\" className=\"numberInput\" onChange={this.handleRegistrationCostValueChange.bind(this)} />\r\n                        <div> BNB</div>\r\n                        <div className=\"confirm-button\" onClick={this.handleChageRegistrationCost.bind(this)}>Change</div>\r\n                    </div>\r\n                </div>\r\n\r\n                <h3>Bunch cycles limit</h3>\r\n                <div className=\"data-change-container\">\r\n                    <div className=\"subDiv\">\r\n                        <label>\r\n                            CURRENT BUNCH CYCLES LIMIT:\r\n                        </label>\r\n                        <div className=\"num-value\">\r\n                            {this.state.bunchCyclesLimit}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"subDiv\">\r\n                        <label>\r\n                            NEW BUNCH CYCLES LIMIT:\r\n                        </label>\r\n                        <input type=\"number\" className=\"numberInput\" onChange={this.handleBunchCyclesValueChange.bind(this)} />\r\n                        <div> BNB</div>\r\n                        <div className=\"confirm-button\" onClick={this.handleChageBunchCycles.bind(this)}>Change</div>\r\n                    </div>\r\n                </div>\r\n\r\n                <h3>Use token payment</h3>\r\n                <div className=\"data-change-container\">\r\n                    <div className=\"subDiv\">\r\n                        <label>\r\n                            USE TOKEN PAYMENT:\r\n                        </label>\r\n                        <div className=\"num-value\">\r\n                            {this.state.useToken.toString()}\r\n                        </div>\r\n                        <div className=\"confirm-button\" onClick={this.handleChageUseToken.bind(this)}>Change</div>\r\n                    </div>\r\n                </div>\r\n\r\n                <h3>Cycles statistics</h3>\r\n                <div className=\"data-change-container\">\r\n                    <div className=\"subDiv\">\r\n                        <label>\r\n                            CURRENT CYCLE:\r\n                        </label>\r\n                        <div className=\"num-value\">\r\n                            {this.state.lastCycle}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"subDiv\">\r\n                        <label>\r\n                            SKIPPED HPs:\r\n                        </label>\r\n                        <div className=\"num-value\">\r\n                            {this.state.skippedHpEasysOffset}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"subDiv\">\r\n                        <label>\r\n                            NEXT CYCLE INFO (if allowed):<br />\r\n                            Matrix / User / HP\r\n                        </label>\r\n                        <div className=\"num-value\">\r\n                            {this.state.nextCycleMatrix} / {this.state.nextCycleUser} / {this.state.nextCycleHp}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <h3>INFINITY GLOBAL contract funds</h3>\r\n                <div className=\"data-change-container\">\r\n                    <div className=\"subDiv\">\r\n                        <label>\r\n                            TOTAL INFINITY GLOBAL BALANCE:\r\n                        </label>\r\n                        <div className=\"num-value\">\r\n                            {this.state.balance} BNB\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"subDiv\">\r\n                        <label>\r\n                            TRANSFER AMOUNT:\r\n                        </label>\r\n                        <input type=\"number\" className=\"numberInput\" onChange={this.handleTransferAmountChange.bind(this)} />\r\n                        <div> BNB</div>\r\n                    </div>\r\n                    <div className=\"subDiv\">\r\n                        <label className=\"short\">\r\n                            TRANSFER TO:\r\n                        </label>\r\n                        <input type=\"text\" className=\"numberInput long\" value={this.state.transferAddress} onChange={this.handleTransferAddressChange.bind(this)} />\r\n                        <div className=\"confirm-button\" onClick={this.handleTransfer.bind(this)}>Transfer</div>\r\n                    </div>\r\n                </div>\r\n\r\n                <h3>INFINITY GLOBAL smartcontract owner</h3>\r\n                <div className=\"data-change-container\">\r\n                    <div className=\"subDiv\">\r\n                        <label className=\"short\">\r\n                            CURRENT OWNER:\r\n                        </label>\r\n                        <div className=\"num-value\">\r\n                            {this.props.owner}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"subDiv\" style={{ display: this.props.unaccaptedOwner ? 'flex' : 'none' }}>\r\n                        <label className=\"short\">\r\n                            UNACCAPTED NEW OWNER:\r\n                        </label>\r\n                        <div className=\"num-value\">\r\n                            {this.props.unaccaptedOwner}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"subDiv\">\r\n                        <label className=\"short\">\r\n                            NEW OWNER:\r\n                        </label>\r\n                        <input type=\"text\" className=\"numberInput long\" onChange={this.handleNewOwnerValueChange.bind(this)} />\r\n                        <div className=\"confirm-button\" onClick={this.handleChangeOwner.bind(this)}>Change</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default HpEasyAdmin;","import React from 'react';\r\nimport Loader from 'react-loader-spinner';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { myConfig } from '../../config.js';\r\nimport Utils from '../../utils';\r\nimport EasyAdmin from './EasyAdmin';\r\nimport AcceptOwnership from './AcceptOwnership';\r\nimport NotLoggedIn from './NotLoggedIn';\r\nimport HpEasyAdmin from './HpEasyAdmin';\r\nimport './Admin.scss';\r\n\r\n\r\nclass Admin extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loader: false,\r\n            isOwnerHpEasy: false,\r\n            isUnaccaptedOwnerHpEasy: false,\r\n            isOwnerEasy: false,\r\n            isUnaccaptedOwnerEasy: false,\r\n            ownerHpEasy: '',\r\n            unaccaptedOwnerHpEasy: '',\r\n            ownerEasy: '',\r\n            unaccaptedOwnerEasy: '',\r\n            pageIsReady: false,\r\n        }\r\n\r\n        this.onLoaderChange = this.onLoaderChange.bind(this)\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await Utils.setWeb3(window);\r\n        \r\n        this.setState({ pageIsReady: true });\r\n        this.initData();\r\n    }\r\n\r\n    onLoaderChange(isShow) {\r\n        if (typeof isShow === 'boolean' && isShow !== null)\r\n            this.setState({ loader: isShow });\r\n        else\r\n            this.setState({ loader: !this.state.loader });\r\n    }\r\n\r\n    async initData() {\r\n        let currentAddress = Utils.getCurrentUserAddress().toLowerCase();\r\n\r\n        this.initisOwnerHpEasy(currentAddress);\r\n        this.initIsHpEasyUnacceptedOwner(currentAddress);\r\n        this.initisOwnerEasy(currentAddress);\r\n        this.initIsEasyUnacceptedOwner(currentAddress);\r\n    }\r\n\r\n    async initisOwnerHpEasy(currentAddress) {\r\n        let ownerHpEasy = await Utils.getHpEasyOwner();\r\n\r\n        if (ownerHpEasy !== null) {\r\n            this.setState({ ownerHpEasy: ownerHpEasy });\r\n\r\n            if (currentAddress === ownerHpEasy.toLowerCase()) {\r\n                this.setState({ isOwnerHpEasy: true });\r\n            }\r\n        }\r\n    }\r\n\r\n    async initIsHpEasyUnacceptedOwner(currentAddress) {\r\n        let unacceptedHpEasyOwner = await Utils.getUnacceptedOwnerHpEasy();\r\n\r\n        if (unacceptedHpEasyOwner !== null && unacceptedHpEasyOwner !== '0x0000000000000000000000000000000000000000') {\r\n            this.setState({ unaccaptedOwnerHpEasy: unacceptedHpEasyOwner });\r\n\r\n            if (currentAddress === unacceptedHpEasyOwner.toLowerCase()) {\r\n                this.setState({ isUnaccaptedOwnerHpEasy: true });\r\n            }\r\n        }\r\n    }\r\n\r\n    async initisOwnerEasy(currentAddress) {\r\n        let ownerEasy = await Utils.getEasyOwner();\r\n\r\n        if (ownerEasy !== null) {\r\n            this.setState({ ownerEasy: ownerEasy });\r\n\r\n            if (currentAddress === ownerEasy.toLowerCase()) {\r\n                this.setState({ isOwnerEasy: true });\r\n            }\r\n        }\r\n    }\r\n\r\n    async initIsEasyUnacceptedOwner(currentAddress) {\r\n        let unacceptedEasyOwner = await Utils.getUnacceptedOwnerEasy();\r\n        \r\n        if (unacceptedEasyOwner !== null && unacceptedEasyOwner !== '0x0000000000000000000000000000000000000000') {\r\n            this.setState({ unaccaptedOwnerEasy: unacceptedEasyOwner });\r\n            \r\n            if (currentAddress === unacceptedEasyOwner.toLowerCase()) {\r\n                this.setState({ isUnaccaptedOwnerEasy: true });\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    async getUnacceptedOwner() {\r\n        let unacceptedOwner = await Utils.getUnacceptedOwnerHpEasy();\r\n        console.log(unacceptedOwner);\r\n\r\n        if (unacceptedOwner !== '0x0000000000000000000000000000000000000000')\r\n            this.setState({ unacceptedOwner: unacceptedOwner });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"admin-container\">\r\n                {this.state.isOwnerHpEasy\r\n                    ? <HpEasyAdmin\r\n                        pageIsReady={this.state.pageIsReady}\r\n                        isAdmin={this.state.isOwnerHpEasy}\r\n                        owner={this.state.ownerHpEasy}\r\n                        unaccaptedOwner={this.state.unaccaptedOwnerHpEasy}\r\n                        onLoaderChange={this.onLoaderChange.bind(this)} />\r\n                    : this.state.isUnaccaptedOwnerHpEasy\r\n                        ? <AcceptOwnership\r\n                            contractName=\"INFINITY GLOBAL\"\r\n                            contractAddress={myConfig.CONTRACT_ADDRESS_HPEASY}\r\n                            owner={this.state.ownerHpEasy}\r\n                            unaccaptedOwner={this.state.unaccaptedOwnerHpEasy}\r\n                            onLoaderChange={this.onLoaderChange.bind(this)} />\r\n                        : <NotLoggedIn\r\n                            owner={this.state.ownerHpEasy}\r\n                            contractName=\"INFINITY GLOBAL\" />\r\n                }\r\n                <div className=\"separator\"> </div>\r\n\r\n                {this.state.isOwnerEasy\r\n                    ? <EasyAdmin\r\n                        pageIsReady={this.state.pageIsReady}\r\n                        isAdmin={this.state.isOwnerEasy}\r\n                        owner={this.state.ownerEasy}\r\n                        unaccaptedOwner={this.state.unaccaptedOwnerEasy}\r\n                        onLoaderChange={this.onLoaderChange.bind(this)} />\r\n                    : this.state.isUnaccaptedOwnerEasy\r\n                        ? <AcceptOwnership\r\n                            contractName=\"INFINITY GLOBAL\" \r\n                            contractAddress={myConfig.CONTRACT_ADDRESS_EASYCOIN}\r\n                            owner={this.state.ownerEasy}\r\n                            unaccaptedOwner={this.state.unaccaptedOwnerEasy}\r\n                            onLoaderChange={this.onLoaderChange.bind(this)} />\r\n                        : <NotLoggedIn\r\n                            owner={this.state.ownerEasy}\r\n                            contractName=\"INFINITY GLOBAL\" />\r\n                }\r\n                <div className=\"darkener\" style={{ display: this.state.loader ? 'block' : 'none' }}></div>\r\n                <Loader\r\n                    className=\"loader\"\r\n                    type=\"Oval\"\r\n                    color=\"#00BFFF\"\r\n                    height={100}\r\n                    width={100}\r\n                    visible={this.state.loader}\r\n                />\r\n\r\n                <div className=\"separator\"> </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(Admin);","import React from 'react';\r\nimport Swal from 'sweetalert2'; //https://sweetalert2.github.io\r\nimport { withRouter } from 'react-router-dom';\r\nimport Utils from '../../utils';\r\n\r\n\r\nclass BuyHpEasy extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    async componentDidUpdate(prevProps) {\r\n        if (((this.props.pageIsReady !== prevProps.pageIsReady) && this.props.isRegistered && this.props.easyBalance !== -1)\r\n            || ((this.props.isRegistered !== prevProps.isRegistered) && this.props.pageIsReady && this.props.easyBalance !== -1)\r\n            || ((this.props.easyBalance !== prevProps.easyBalance) && this.props.isRegistered && this.props.pageIsReady)) {\r\n\r\n            let payment = await Utils.getPaymentStatusForCurrentUser();\r\n            this.secondPaymentStep(payment);\r\n        }\r\n    }\r\n\r\n    changeLoader(showLoader) {\r\n        this.props.onLoaderChange(showLoader);\r\n    }\r\n\r\n    async handleBuyHpEasy() {\r\n        if (!this.props.isRegistered) {\r\n            Swal.fire({\r\n                icon: 'warning',\r\n                title: 'Not logged in',\r\n                showCancelButton: true,\r\n                cancelButtonText: 'Got it',\r\n                confirmButtonText: 'Ok, let\\'s login/register',\r\n                html: \"<p>To purchase INFINITY GLOBAL you need to login to your dashboard</p><p>If you want to login to your dashboard, please go to home page and press 'LOGIN/REGISTER' button</p>\"\r\n            }).then((result) => {\r\n                if (result.isConfirmed) {\r\n                    this.props.history.push('/');\r\n                }\r\n            });;\r\n            return;\r\n        }\r\n\r\n        if (!this.props.isRenew && this.props.hpeasyCooldownTime * 1000 >= (new Date() - 86400 * 1000) && this.props.hpeasyCooldownNum >= 3) {\r\n            Swal.fire({\r\n                icon: 'warning',\r\n                title: 'Reached 24h limit',\r\n                confirmButtonText: 'Ok, I\\'ll try later',\r\n                html: \"<p>You have reached 24h purchase limit</p><p>Please retry later</p>\"\r\n            });\r\n            return;\r\n        }\r\n        else if (!this.props.isRenew) {\r\n            this.buyHpEasy();\r\n        } else {\r\n            this.renew();\r\n        }\r\n    }\r\n\r\n    async buyHpEasy() {\r\n        let payment = await Utils.getPaymentStatusForCurrentUser();\r\n\r\n        if (!payment.isEthPaid && !payment.isTokensPaid) {\r\n            this.payEthForPurchase(this.props.useToken);\r\n        } else {\r\n            this.secondPaymentStep(payment, \"purchase\");\r\n        }\r\n    }\r\n\r\n    async renew() {\r\n        let payment = await Utils.getPaymentStatusForCurrentUser();\r\n\r\n        if (!payment.isEthPaid && !payment.isTokensPaid) {\r\n            this.payEthForRenew(this.props.useToken);\r\n        } else {\r\n            this.secondPaymentStep(payment, \"renew\");\r\n        }\r\n    }\r\n\r\n    async secondPaymentStep(payment, actionName) {\r\n        if (!actionName) actionName = payment.isRenew ? \"renew\" : \"purchase\";\r\n\r\n        if (!payment.isEthPaid && payment.isTokensPaid) {\r\n            Swal.fire({\r\n                title: 'One step left',\r\n                icon: 'info',\r\n                html: \"<p>We have noticed that you've already paid \" + this.props.PURCHASE_COST_ETH / 1000000000000000000 + \"&nbsp;IGL. </p><p> To finish your \" + actionName + \" please pay \" + this.props.PURCHASE_COST_ETH / 1000000000000000000 + \"&nbsp;BNB</p>\",\r\n                showCancelButton: true,\r\n                confirmButtonText: 'Ok, let\\'s do it',\r\n                cancelButtonText: 'I\\'ll do it later',\r\n            }).then((result) => {\r\n                if (result.isConfirmed) {\r\n                    console.log(payment);\r\n                    console.log(payment.matrixToRenew);\r\n                    if (payment.matrixToRenew === \"0\") {\r\n                        console.log(\"purchase\")\r\n                        this.payEthForPurchase(false);\r\n                    } else {\r\n                        console.log(\"renew\")\r\n                        this.payEthForRenew(false);\r\n                    }\r\n                }\r\n            });\r\n        } else if (payment.isEthPaid && !payment.isTokensPaid) {\r\n            let isExtraTokensNeeded = this.props.easyBalance - this.props.PURCHASE_COST_ETH / 1000000000000000000 < 0;\r\n            let html = \"<p>We have noticed that you've already paid \" + this.props.PURCHASE_COST_ETH / 1000000000000000000 + \"&nbsp;BNB. </p>\";\r\n            html += \"<p> To finish your \" + actionName + \" please pay <b>\" + this.props.PURCHASE_COST_ETH / 1000000000000000000 + \"&nbsp;IGL</b><br>\" + (isExtraTokensNeeded\r\n                ? \"<i>(it costs just <b>\" + this.props.PURCHASE_COST_EASY_ETH_EQUIVALENT / 1000000000000000000 + \"&nbsp;BNB</i></b>)</p>\"\r\n                : \"<i>(it will be withdrawn from your&nbsp;IGL balance)</i>\");\r\n\r\n            Swal.fire({\r\n                title: 'One step left',\r\n                icon: 'info',\r\n                html: html,\r\n                showCancelButton: true,\r\n                confirmButtonText: 'Ok, let\\'s do it',\r\n                cancelButtonText: 'I\\'ll do it later',\r\n            }).then((result) => {\r\n                if (result.isConfirmed) {\r\n                    this.payEasy(false, payment.matrix_to_renew > 0, isExtraTokensNeeded);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    async payEthForRenew(isTokenPaymentNeeded) {\r\n        this.changeLoader(true);\r\n\r\n        await Utils.renewInEth(this.props.PURCHASE_COST_ETH, this.props.matrixToRenew)\r\n            .then(\r\n                result => {\r\n                    let isExtraTokensNeeded = this.props.easyBalance - this.props.PURCHASE_COST_ETH / 1000000000000000000 < 0;\r\n                    let html = !isTokenPaymentNeeded\r\n                        ? \"Congradulation! You have renewed your position for current HP\"\r\n                        : \"Nice, \" + this.props.PURCHASE_COST_ETH / 1000000000000000000 + \"&nbsp;BNB is paid! <p>  Now you need to pay <b>\" + this.props.PURCHASE_COST_ETH / 1000000000000000000 + \"&nbsp;IGL</b><br>\" + (isExtraTokensNeeded\r\n                            ? \"<i>(it costs just <b>\" + this.props.PURCHASE_COST_EASY_ETH_EQUIVALENT / 1000000000000000000 + \"&nbsp;BNB</i></b>)</p>\"\r\n                            : \"<i>(it will be withdrawn from your IGL balance)</i></p>\");\r\n\r\n                    Swal.fire({\r\n                        icon: isTokenPaymentNeeded ? 'info' : 'success',\r\n                        title: isTokenPaymentNeeded ? 'Second step' : 'Success',\r\n                        showCancelButton: isTokenPaymentNeeded,\r\n                        confirmButtonText: isTokenPaymentNeeded ? 'Pay IGL' : 'Great',\r\n                        cancelButtonText: 'I\\'ll do it later',\r\n                        html: html\r\n                    }).then((result) => {\r\n                        if (result.isConfirmed && isTokenPaymentNeeded) {\r\n                            this.payEasy(false, true, isExtraTokensNeeded);\r\n                        } else if (result.isConfirmed && !isTokenPaymentNeeded) {\r\n                            window.location.reload();\r\n                        }\r\n                        this.changeLoader(false);\r\n                    });\r\n                },\r\n                error => {\r\n                    this.handleUnsuccessfulPayment(error, 'Ok, I\\'ll check result manually')\r\n                }\r\n            ).catch(err => {\r\n                this.changeLoader(false);\r\n                console.error(\"Error\");\r\n                console.error(err);\r\n            });\r\n    }\r\n\r\n    async payEthForPurchase(isTokenPaymentNeeded) {\r\n        this.changeLoader(true);\r\n\r\n        await Utils.purchaseInEth(this.props.PURCHASE_COST_ETH)\r\n            .then(\r\n                result => {\r\n                    let isExtraTokensNeeded = this.props.easyBalance - this.props.PURCHASE_COST_ETH / 1000000000000000000 < 0;\r\n                    let html = !isTokenPaymentNeeded\r\n                        ? \"Congradulation! You have purchased one more INFINITY GLOBAL\"\r\n                        : \"Nice, \" + this.props.PURCHASE_COST_ETH / 1000000000000000000 + \"&nbsp;BNB is paid! <br>  <p>Now you need to pay <b>\" + this.props.PURCHASE_COST_ETH / 1000000000000000000 + \"&nbsp;IGL</b><br>\" + (isExtraTokensNeeded\r\n                            ? \"<i>(it costs just <b>\" + this.props.PURCHASE_COST_EASY_ETH_EQUIVALENT / 1000000000000000000 + \"&nbsp;BNB</i></b>)</p>\"\r\n                            : \"<i>(it will be withdrawn from your IGL balance)</i></p>\");\r\n                    Swal.fire({\r\n                        icon: isTokenPaymentNeeded ? 'info' : 'success',\r\n                        title: isTokenPaymentNeeded ? 'Second step' : 'Success',\r\n                        showCancelButton: isTokenPaymentNeeded,\r\n                        confirmButtonText: isTokenPaymentNeeded ? 'Pay IGL' : 'Great',\r\n                        cancelButtonText: 'I\\'ll do it later',\r\n                        html: html\r\n                    }).then((result) => {\r\n                        if (result.isConfirmed && isTokenPaymentNeeded) {\r\n                            this.payEasy(false, false, isExtraTokensNeeded);\r\n                        } else if (result.isConfirmed && !isTokenPaymentNeeded) {\r\n                            window.location.reload();\r\n                        } else {\r\n                            this.changeLoader(false);\r\n                        }\r\n                    });\r\n                },\r\n                error => {\r\n                    this.handleUnsuccessfulPayment(error, 'Ok, let\\'s reload and check result');\r\n                }\r\n            ).catch(err => {\r\n                this.changeLoader(false);\r\n                console.error(\"Error\");\r\n                console.error(err);\r\n            });\r\n    }\r\n\r\n    async payEasy(isEthPaymentNeeded, isRenew, isExtraTokensNeeded) {\r\n        this.changeLoader(true);\r\n\r\n        if (isExtraTokensNeeded) {\r\n            await Utils.payAndSendEasy(this.props.PURCHASE_COST_EASY_ETH_EQUIVALENT)\r\n                .then(\r\n                    result => this.handleSuccessfulPayment(isEthPaymentNeeded, isRenew, isExtraTokensNeeded),\r\n                    error => this.handleUnsuccessfulPayment(error, 'Ok, let\\'s reload and check result'))\r\n                .catch(\r\n                    err => {\r\n                        this.changeLoader(false);\r\n                        console.error(\"Error\");\r\n                        console.error(err);\r\n                    });\r\n        } else {\r\n            await Utils.sendEasy(this.props.PURCHASE_COST_EASY)\r\n                .then(\r\n                    result => this.handleSuccessfulPayment(isEthPaymentNeeded, isRenew, isExtraTokensNeeded),\r\n                    error => this.handleUnsuccessfulPayment(error, 'Ok, let\\'s reload and check result'))\r\n                .catch(\r\n                    err => {\r\n                        console.log(\"Extra catch log\");\r\n                        this.changeLoader(false);\r\n                        console.error(\"Error\");\r\n                        console.error(err);\r\n                    });\r\n        }\r\n    }\r\n\r\n    async handleSuccessfulPayment(isEthPaymentNeeded, isRenew, isExtraTokensNeeded) {\r\n        let html = isEthPaymentNeeded ?\r\n            \"Nice, \" + this.props.PURCHASE_COST_ETH / 1000000000000000000 + \"&nbsp;IGL is paid! <p> Now you need to pay\" + this.props.PURCHASE_COST_ETH / 1000000000000000000 + \"&nbsp;BNB</p>\"\r\n            : \"Congradulation! You \" + (isRenew ? \"have renewed your position\" : \"have purchased one more INFINITY GLOBAL\");\r\n\r\n        Swal.fire({\r\n            icon: isEthPaymentNeeded ? 'info' : 'success',\r\n            title: isEthPaymentNeeded ? 'Second step' : 'Success',\r\n            showCancelButton: isEthPaymentNeeded,\r\n            confirmButtonText: isEthPaymentNeeded ? 'Pay ' + this.props.PURCHASE_COST_ETH / 1000000000000000000 + '&nbsp;BNB' : 'Great',\r\n            cancelButtonText: 'I\\'ll do it later',\r\n            html: html\r\n        }).then((result) => {\r\n            if (result.isConfirmed && isEthPaymentNeeded) {\r\n                if (!isRenew) {\r\n                    this.payEthForPurchase(false);\r\n                } else {\r\n                    this.payEthForRenew(false);\r\n                }\r\n\r\n            } else if (result.isConfirmed && !isEthPaymentNeeded) {\r\n                window.location.reload();\r\n            }\r\n            this.changeLoader(false);\r\n        });\r\n    }\r\n\r\n    async handleUnsuccessfulPayment(error, okButtonText) {\r\n        Swal.fire({\r\n            icon: 'error',\r\n            title: 'Fail',\r\n            html: error\r\n        }).then(result => {\r\n            this.changeLoader(false);\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className={this.props.isRenew ? \"hp_button renew readonly\" : \"hp_button readonly\"} id=\"purchase\" onClick={this.handleBuyHpEasy.bind(this)}>\r\n                {!this.props.isRenew\r\n                    ? \"Buy IGL: \" + this.props.PURCHASE_COST_ETH / 1000000000000000000 + \" BNB/IGL\"\r\n                    : \"Renew for \" + this.props.PURCHASE_COST_ETH / 1000000000000000000 + \" BNB/IGL\"}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(BuyHpEasy);\r\n","import React from 'react';\r\nimport Swal from 'sweetalert2'; //https://sweetalert2.github.io\r\nimport Loader from 'react-loader-spinner';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { myConfig } from '../../config.js';\r\nimport BuyEasy from './../BuyEasy';\r\nimport BuyHpEasy from './BuyHpEasy.js';\r\nimport Utils from '../../utils';\r\nimport logo from '../../assets/logo-.svg';\r\nimport jackpot from '../../assets/jackpot_.png';\r\nimport jackpotWhite from '../../assets/jackpot_white.png';\r\nimport './Dashboard.scss';\r\n\r\n\r\nclass Dashboard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let matrix = {\r\n            id: 0,\r\n            owner: '',\r\n            referralsCnt: 0,\r\n            matrixReferrer: 0,\r\n            directReferrer: '',\r\n            cycles: 0,\r\n            bunchCycles: 0,\r\n            referrals: [{ id: 0, type: 'other' }, { id: 0, type: 'other' }, { id: 0, type: 'other' }, { id: 0, type: 'other' }]\r\n        }\r\n\r\n        this.state = {\r\n            loader: false,\r\n            isRegistered: false,\r\n\r\n            useToken: true,\r\n            userId: 0,\r\n            address: '',\r\n            viewerAddress: '',\r\n            referrer: 0,\r\n            matricesCnt: 0,\r\n            lastMatrix: 0,\r\n            hpeasyCooldownTime: 0,\r\n            hpeasyCooldownNum: 0,\r\n            directReferrals: 0,\r\n            sponsorId: 0,\r\n\r\n            matrixEarningEth: 0,\r\n            matrixEarningUsd: 0,\r\n            hpEarningEth: 0,\r\n            hpEarningUsd: 0,\r\n            currentMatrix: matrix,\r\n            referMatrixOwnerId: '',\r\n            matrixIndex: 0,\r\n            isMatrixOfCurrentUser: true,\r\n            totalCycles: 0,\r\n            metrixEarning: 0,\r\n            lastUserMatrixId: 0,\r\n\r\n            level1: 0,\r\n            level2: 0,\r\n            level3: 0,\r\n            level4: 0,\r\n            network: 0,\r\n            directReferral1: 0,\r\n            directReferral2: 0,\r\n            directReferral3: 0,\r\n            directReferral4: 0,\r\n\r\n            userMatricesIds: [],\r\n            transactions: [],\r\n            matrixNetworkInfos: {},\r\n            matrices: [],\r\n            inactiveMatrices: [],\r\n\r\n            totalUsers: 0,\r\n            totalHPEasys: 0,\r\n            lastHpEasyId: 0,\r\n            skippedHpEasys: 0,\r\n            bunchCyclesLimit: 0,\r\n\r\n            fetchMatrixInfo: false,\r\n            pageIsReady: false,\r\n\r\n            jackpotLoad: [],\r\n            isJackpotInfoBlock: false,\r\n            jackpotQueue: null,\r\n\r\n            easyAccountBalance: -1,\r\n            easyBalance: -1,\r\n            PURCHASE_COST_ETH: 0,\r\n            PURCHASE_COST_EASY: 0,\r\n            PURCHASE_COST_EASY_ETH_EQUIVALENT: 0,\r\n            ETH_TO_EASY: 0,\r\n            ETH_TO_USD: 0\r\n        };\r\n\r\n\r\n        if (typeof this.props !== 'undefined' && typeof this.props.match !== 'undefined' && typeof this.props.match.params !== 'undefined') {\r\n            if (typeof this.props.match.params.id !== 'undefined')\r\n                this.state.userId = this.props.match.params.id;\r\n        } else {\r\n            this.state.userId = 0;\r\n        }\r\n\r\n        this.onLoaderChange = this.onLoaderChange.bind(this);\r\n        this.handleJoinJackpot = this.handleJoinJackpot.bind(this);\r\n        this.handleShowJackpotParticipants = this.handleShowJackpotParticipants.bind(this);\r\n\r\n    }\r\n\r\n    // #region Component mount / unmount\r\n    async componentDidMount() {\r\n        await Utils.setWeb3(window);\r\n\r\n        this.setState({ pageIsReady: true });\r\n        this.initData();\r\n    }\r\n    // #endregion\r\n\r\n    async initData() {\r\n        //this.getRegistrationCostChangeEvents();\r\n        this.initEthToUsdtExchageRate();\r\n        this.initEthToEasyExchangeRate();\r\n        this.initPurchaseCosts();\r\n        this.initDashboardGeneralInfo();\r\n        this.getUseToken();\r\n        let user = null;\r\n\r\n        if (this.state.userId === 0) {\r\n            let currentUserAddress = await Utils.getCurrentUserAddress();\r\n            user = await Utils.getCleanUser(currentUserAddress);\r\n            if (user === null) return;\r\n            this.setState({ userId: user.userId });\r\n        }\r\n\r\n        await this.initUserGeneralInfo(user);\r\n        this.initEasyBalance();\r\n        this.initPaymentEvents();\r\n        this.initMatricesInfo();\r\n    }\r\n\r\n    // async getRegistrationCostChangeEvents() {\r\n    //     console.log(\"Get reg eventsss\");\r\n    //     let reg = await Utils.getRegistrationCostChangeEvents(); \r\n    //     console.log(reg);\r\n    // }\r\n\r\n    // #region Dashboard General Info\r\n    async initEthToUsdtExchageRate() {\r\n        await fetch(\"https://api.binance.com/api/v3/avgPrice?symbol=ETHUSDT\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        ETH_TO_USD: parseFloat(result.price)\r\n                    });\r\n                },\r\n                (error) => {\r\n                    console.error(\"Can't get exchange rate from Binance, use default value instead\");\r\n                    this.setState({\r\n                        ETH_TO_USD: myConfig.ETH_TO_USD\r\n                    });\r\n                });\r\n    }\r\n\r\n    async initEthToEasyExchangeRate() {\r\n        let rate = await Utils.getExchangeRate();\r\n\r\n        if (rate !== null) {\r\n            this.setState({ ETH_TO_EASY: rate });\r\n        }\r\n    }\r\n\r\n    async getUseToken() {\r\n        let useToken = await Utils.getUseToken();\r\n        if (useToken === null) return;\r\n        this.setState({ useToken: useToken });\r\n    }\r\n\r\n    async initEasyBalance() {\r\n        let easyAccountBalance = await Utils.getEasyBalanceByUser(this.state.address);\r\n        if (easyAccountBalance === null) return;\r\n        this.setState({ easyAccountBalance: easyAccountBalance });\r\n\r\n        if (this.state.isRegistered) {\r\n            this.setState({ easyBalance: easyAccountBalance });\r\n        } else {\r\n            let easyBalance = await Utils.getEasyBalanceByUser();\r\n            if (easyBalance === null) return;\r\n            this.setState({ easyBalance: easyBalance });\r\n        }\r\n    }\r\n\r\n    async initPurchaseCosts() {\r\n        let purchaseCostEth = await Utils.getRegistrationCost();\r\n        if (purchaseCostEth === null) return;\r\n        this.setState({ PURCHASE_COST_ETH: purchaseCostEth });\r\n\r\n        let purchaseCostEasyInEthEquivalent = await Utils.getRegistrationCostEasyInEthEquivalent(purchaseCostEth, this.state.ETH_TO_EASY);\r\n        this.setState({ PURCHASE_COST_EASY: purchaseCostEth });\r\n        this.setState({ PURCHASE_COST_EASY_ETH_EQUIVALENT: purchaseCostEasyInEthEquivalent });\r\n    }\r\n\r\n    async initDashboardGeneralInfo() {\r\n        this.getTotalUsers();\r\n        this.getTotalHpEasys();\r\n        this.getSkippedHpEasys();\r\n        this.getBunchCyclesLimit();\r\n    }\r\n\r\n    async getTotalUsers() {\r\n        let totalUsers = await Utils.getTotalUsers();\r\n        if (totalUsers === null) return;\r\n        this.setState({ totalUsers: totalUsers });\r\n    }\r\n\r\n    async getTotalHpEasys() {\r\n        let totalHPEasys = await Utils.getTotalHpEasys();\r\n        if (totalHPEasys === null) return;\r\n        this.setState({ totalHPEasys: totalHPEasys / 2 - this.state.skippedHpEasys });\r\n    }\r\n\r\n    async getSkippedHpEasys() {\r\n        let skippedHpEasys = await Utils.getSkippedHpsOffset();\r\n        if (skippedHpEasys === null) return;\r\n        this.setState({ skippedHpEasys: skippedHpEasys });\r\n        if (this.state.totalHPEasys > 0) {\r\n            this.setState({ totalHPEasys: this.state.totalHPEasys - this.state.skippedHpEasys });\r\n        }\r\n    }\r\n\r\n    async getBunchCyclesLimit() {\r\n        let bunchCyclesLimit = await Utils.getBunchCyclesLimit();\r\n        this.setState({ bunchCyclesLimit: bunchCyclesLimit });\r\n    }\r\n    // #endregion\r\n\r\n\r\n    // #region User General Info\r\n    async initUserGeneralInfo(user) {\r\n        this.setState({ viewerAddress: Utils.getCurrentUserAddress() });\r\n        if (user === null) {\r\n            user = await Utils.getUserByIdClean(this.state.userId);\r\n        }\r\n\r\n        if (user === null) {\r\n            Swal.fire({\r\n                title: 'Connection problem',\r\n                icon: 'error',\r\n                html: \"<p>Sorry, can't connect to ETHEREUM network.</p> <p>Please connect your Web3 provider <br><i>(<a href='\" + myConfig.METAMASK_URL + \"' target='_blank' rel='noopener noreferrer'>MetaMask</a> or other wallets that support online operations)</i></p>\"\r\n            })\r\n            return;\r\n        }\r\n\r\n        let currentUserAddress = Utils.getCurrentUserAddress();\r\n\r\n        if (currentUserAddress === user.address) {\r\n            console.log(\"User is registered\");\r\n            this.setState({ isRegistered: true });\r\n        }\r\n\r\n        this.setState({ userId: user.userId });\r\n        this.setState({ address: user.address });\r\n        this.setState({ referrer: user.referrer });\r\n        this.setState({ matricesCnt: user.matricesCnt });\r\n        this.setState({ lastMatrix: user.lastMatrix });\r\n        this.setState({ hpeasyCooldownTime: user.hpeasyCooldownTime });\r\n        this.setState({ hpeasyCooldownNum: user.hpeasyCooldownNum });\r\n        this.setState({ directReferrals: user.directReferrals });\r\n\r\n        if (this.state.fetchMatrixInfo) {\r\n            this.initMatricesInfo();\r\n        }\r\n\r\n        this.getSponsorId(user.referrer);\r\n    }\r\n\r\n    async getSponsorId(sponsorAddress) {\r\n        let sponsor = await Utils.getCleanUser(sponsorAddress);\r\n        if (sponsor != null) {\r\n            this.setState({ sponsorId: sponsor.userId });\r\n        }\r\n    }\r\n    // #endregion\r\n\r\n\r\n    // #region Matrices Info\r\n    async initMatricesInfo() {\r\n        if (await this.getUserMatricesIdsList()) {\r\n            this.getMatrixInfo(this.state.userMatricesIds[0], this.areMatricesActive);\r\n            this.getMatrixNetworkInfo(this.state.userMatricesIds[0]);\r\n\r\n            this.setState({ lastUserMatrixId: this.state.userMatricesIds[0] });\r\n        }\r\n    }\r\n\r\n    async getUserMatricesIdsList() {\r\n        if (this.state.userId === 0) {\r\n            this.setState({ fetchMatrixInfo: true });\r\n            console.log(\"Will get matrix info after user id is ready\");\r\n            return false;\r\n        } else {\r\n            this.setState({ fetchMatrixInfo: false });\r\n        }\r\n\r\n        let userMatricesIds = await Utils.getUserMatrixIds(this.state.userId);\r\n        this.setState({ userMatricesIds: userMatricesIds });\r\n\r\n        return true;\r\n    }\r\n\r\n    async getMatrixInfo(matrixId, callback) {\r\n        let matrix;\r\n        if (typeof matrixId === 'undefined') return;\r\n\r\n        if (typeof this.state.matrices[matrixId] === 'undefined') {\r\n            matrix = await Utils.getCleanMatrix(matrixId);\r\n            if (matrix === null) return;\r\n\r\n            let matrixReferrals = await Utils.getMatrixReferrers(matrixId);\r\n\r\n            let allUserMatrices = this.state.userMatricesIds.includes(matrix.id) ?\r\n                this.state.userMatricesIds : [];\r\n\r\n            let referralsWithTypes = this.getReferralType(matrixReferrals, allUserMatrices);\r\n\r\n            matrix.referrals = referralsWithTypes;\r\n            let matrices = this.state.matrices;\r\n            matrices[matrixId] = matrix;\r\n            this.setState({ matrices: matrices });\r\n        } else {\r\n            matrix = this.state.matrices[matrixId];\r\n        }\r\n\r\n        let referMatrixOwnerId = await this.getMatrixOwnerId(matrix.matrixReferrer);\r\n\r\n        this.setState({ referMatrixOwnerId: referMatrixOwnerId });\r\n        this.setState({ currentMatrix: matrix });\r\n\r\n        if (callback) {\r\n            callback = callback.bind(this);\r\n            callback();\r\n        }\r\n    }\r\n\r\n    async getMatrixOwnerId(matrixId) {\r\n        let matrix;\r\n        let fromState = false;\r\n\r\n        if (typeof matrixId === 'undefined') return '';\r\n\r\n        if (typeof this.state.matrices[matrixId] === 'undefined') {\r\n            matrix = await Utils.getCleanMatrix(matrixId);\r\n            if (matrix === null) return '';\r\n        } else {\r\n            matrix = this.state.matrices[matrixId];\r\n            fromState = true;\r\n        }\r\n\r\n        if (typeof matrix.ownerId === 'undefined') {\r\n            let matrixOwner = await Utils.getCleanUser(matrix.owner);\r\n            if (matrixOwner === null) return '';\r\n            matrix.ownerId = matrixOwner.userId;\r\n\r\n            if (fromState) {\r\n                let matrices = this.state.matrices;\r\n                matrices[matrix.id] = matrix;\r\n                this.setState({ matrices: matrices });\r\n            }\r\n        }\r\n\r\n        return matrix.ownerId;\r\n    }\r\n\r\n    async getMatrixNetworkInfo(matrixId) {\r\n        let matrixNetworkInfo = {};\r\n\r\n        if (typeof this.state.matrixNetworkInfos[matrixId] === 'undefined') {\r\n            let referralsTree = { id: matrixId, parentId: null, children: [] };\r\n            await this.buildNodeBranch(referralsTree, 0);\r\n            matrixNetworkInfo = this.calculateNetwork(referralsTree);\r\n\r\n            let matrixNetworkInfos = this.state.matrixNetworkInfos;\r\n            matrixNetworkInfos[matrixId] = matrixNetworkInfo;\r\n            this.setState({ matrixNetworkInfos: matrixNetworkInfos });\r\n        } else {\r\n            //console.log(\"Get network info for matrix id \" + matrixId + \" from state\");\r\n            matrixNetworkInfo = this.state.matrixNetworkInfos[matrixId];\r\n        }\r\n\r\n        this.setState({ level1: matrixNetworkInfo.level1 });\r\n        this.setState({ level2: matrixNetworkInfo.level2 });\r\n        this.setState({ level3: matrixNetworkInfo.level3 });\r\n        this.setState({ level4: matrixNetworkInfo.level4 });\r\n        this.setState({ network: matrixNetworkInfo.network });\r\n    }\r\n\r\n    async buildNodeBranch(node, treeDebth) {\r\n        treeDebth++;\r\n        if (treeDebth > 4) {\r\n            return;\r\n        }\r\n\r\n        let matrixId = node.id;\r\n\r\n        let matrixReferrals = await Utils.getMatrixReferrers(matrixId);\r\n\r\n        for (let i = 0; i < matrixReferrals.length; i++) {\r\n            let childNode = {\r\n                id: matrixReferrals[i],\r\n                parentId: matrixId,\r\n                children: []\r\n            }\r\n\r\n            await this.buildNodeBranch(childNode, treeDebth);\r\n\r\n            node.children.push(childNode);\r\n        }\r\n    }\r\n\r\n    calculateNetwork(referralsTree) {\r\n        let level1 = 0,\r\n            level2 = 0,\r\n            level3 = 0,\r\n            level4 = 0;\r\n\r\n        level1 = referralsTree.children.length;\r\n\r\n        referralsTree.children.forEach(elementLevel1 => {\r\n            level2 += elementLevel1.children.length;\r\n\r\n            elementLevel1.children.forEach(elementLevel2 => {\r\n                level3 += elementLevel2.children.length;\r\n\r\n                elementLevel2.children.forEach(elementLevel3 => {\r\n                    level4 += elementLevel3.children.length;\r\n                });\r\n            });\r\n        });\r\n\r\n        if (level1 > 4) level1 = 4;\r\n        if (level1 > 16) level1 = 16;\r\n        if (level1 > 64) level1 = 64;\r\n        if (level1 > 256) level1 = 256;\r\n\r\n        let firstReferrals = [];\r\n        referralsTree.children.forEach(child => {\r\n            firstReferrals.push(child.id);\r\n        })\r\n\r\n        let matrixNetworkInfo = {\r\n            id: referralsTree.id,\r\n            parentId: referralsTree.parentId,\r\n            firstReferrals: firstReferrals,\r\n            level1: level1,\r\n            level2: level2,\r\n            level3: level3,\r\n            level4: level4,\r\n            network: level1 + level2 + level3 + level4\r\n        };\r\n\r\n        return matrixNetworkInfo;\r\n    }\r\n\r\n    getReferralType(matrixReferrals, allUserMatrices) {\r\n        let res = [];\r\n        for (let i = 0; i < 4; i++) {\r\n            let refId = matrixReferrals[i];\r\n            if (typeof refId === 'undefined') refId = 0;\r\n\r\n            if (allUserMatrices.includes(refId)) {\r\n                res.push({ id: refId, type: \"user\" });\r\n            } else {\r\n                res.push({ id: refId, type: \"other\" });\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n\r\n    async areMatricesActive() { //TODO: confirm that initGlobalCycle is completed, bunchCyclesLimit is completed\r\n        await this.checkMatrixStatus(this.state.currentMatrix.id, this.state.currentMatrix.bunchCycles);\r\n        if (this.state.userMatricesIds.length > 1) {\r\n            for (let i = 1; i < this.state.userMatricesIds.length; i++) {\r\n                await this.checkMatrixStatus(this.state.userMatricesIds[i]);\r\n            }\r\n        }\r\n\r\n        this.processInactiveMatrixResult();\r\n    }\r\n\r\n    async checkMatrixStatus(matrixId, bunchCycles) {\r\n        //console.log(\"Checking matrix \" + matrixId);\r\n        if (!bunchCycles) {\r\n            let matrix = await Utils.getCleanMatrix(matrixId);\r\n            bunchCycles = matrix.bunchCycles;\r\n        }\r\n\r\n        if (this.state.bunchCyclesLimit === 0) {\r\n            console.error(\"bunchCyclesLimit is 0\");\r\n        } else if (bunchCycles >= this.state.bunchCyclesLimit) {\r\n            let inactiveMatrices = this.state.inactiveMatrices;\r\n            inactiveMatrices.push(matrixId);\r\n            this.setState({ inactiveMatrices: inactiveMatrices });\r\n        }\r\n    }\r\n\r\n    processInactiveMatrixResult() {\r\n        if (this.state.inactiveMatrices.length > 0) {\r\n            console.warn(\"User has inactive matrices. id: \" + this.state.inactiveMatrices.join(', '));\r\n            let isOneMatrix = this.state.inactiveMatrices.length === 1;\r\n            let html = 'We have noticed that your ';\r\n            html += (isOneMatrix ? '<b>matrix ' : '<b>matrices ') + this.state.inactiveMatrices.join(', ');\r\n            html += (isOneMatrix ? '</b> has ' : '</b> have ') + ' cycled more than ' + this.state.bunchCyclesLimit + ' times.';\r\n            html += '<p>To be able to cycle again please renew ' + (isOneMatrix ? 'it' : 'them') + '</p>'\r\n\r\n            Swal.fire({\r\n                icon: 'info',\r\n                title: 'Inactive matrices detected',\r\n                confirmButtonText: \"Thank you for info\",\r\n                html: html\r\n            });\r\n        }\r\n    }\r\n\r\n    //Obsolete\r\n    processSkippedMatrixResult() {\r\n        if (this.state.skippedMatrices.length > 0)\r\n            console.log(\"User has skipped matrices. id: \" + this.state.skippedMatrices.join(', '));\r\n\r\n        if (this.state.skippedMatrices.length === this.state.userMatricesIds.length) {\r\n            let isOneMatrix = this.state.skippedMatrices.length === 1;\r\n\r\n            let html = 'We have noticed that your ';\r\n            html += (isOneMatrix ? 'matrix ' : 'matrices ') + this.state.skippedMatrices.join(', ');\r\n            html += (isOneMatrix ? ' was' : ' were') + ' skipped. <p>To be able cycle again please purchase new INFINITY GLOBAL<br>';\r\n            Swal.fire({\r\n                icon: 'info',\r\n                title: 'Skipped matrices detected',\r\n                confirmButtonText: \"Thank you for info\",\r\n                html: html\r\n            })\r\n        }\r\n    }\r\n    //#endregion\r\n\r\n\r\n    // #region Payment Events (for transactions table)\r\n    async initPaymentEvents() {\r\n        if (this.state.userId === 0) { console.error(\"USER ID NOT SET\"); return };\r\n\r\n        let transferEvents = await Utils.getContractTransferEventsByUser(\"Transfer\", this.state.address.toLocaleLowerCase());\r\n        this.processTransferEvents(transferEvents);\r\n    }\r\n\r\n\r\n    processTransferEvents(transferEvents) {\r\n        let transactions = [];\r\n        let matrixErnings = 0;\r\n        let hpEarnings = 0;\r\n\r\n        for (let i = 0; i < transferEvents.length; i++) {\r\n            // eslint-disable-next-line \r\n            if (transferEvents[i].returnValues.amount == this.state.PURCHASE_COST_ETH * 3 / 10) { //TODO: make changable\r\n                hpEarnings += parseInt(transferEvents[i].returnValues.amount);\r\n                transactions.push({\r\n                    type: 'HP',\r\n                    id: transferEvents[i].transactionHash,\r\n                    date: this.getDateFromTimestamp(transferEvents[i].block_timestamp * 1000),\r\n                    amount: transferEvents[i].returnValues.amount,\r\n                });\r\n            } else {\r\n                matrixErnings += parseInt(transferEvents[i].returnValues.amount);\r\n                transactions.push({\r\n                    type: 'MATRIX',\r\n                    id: transferEvents[i].transactionHash,\r\n                    date: this.getDateFromTimestamp(transferEvents[i].block_timestamp * 1000),\r\n                    amount: transferEvents[i].returnValues.amount,\r\n                });\r\n            }\r\n        }\r\n\r\n        this.setState({ hpEarningEth: hpEarnings / 1000000000000000000 });\r\n        this.setState({ matrixEarningEth: matrixErnings / 1000000000000000000 });\r\n        this.setState({ transactions: transactions });\r\n    }\r\n    // #endregion\r\n\r\n\r\n    //#region JACKPOT\r\n    async getJackpotPayload() {\r\n        if (this.state.isJackpotInfoLoaded) return;\r\n\r\n        //setTimeout(function () { //random fill\r\n        let jackpotLoad = [];\r\n\r\n        for (let line = 0; line < myConfig.JACKPOT_LINES.length; line++) {\r\n            for (let bet = 0; bet < myConfig.JACKPOT_BETS.length; bet++) {\r\n                let bets = await Utils.getBetFill(myConfig.JACKPOT_LINES[line], myConfig.JACKPOT_BETS[bet]);\r\n                //let bets = this.getRandomInt(0, myConfig.JACKPOT_LINES[line]); //random fill\r\n                let winners = await Utils.getJackpotWinnerEvents(myConfig.JACKPOT_LINES[line], myConfig.JACKPOT_BETS[bet]);\r\n                jackpotLoad.push({\r\n                    line: myConfig.JACKPOT_LINES[line],\r\n                    betSize: myConfig.JACKPOT_BETS[bet],\r\n                    betsCount: bets,\r\n                    winnersCount: winners.length,\r\n                    lastWinner: winners.length > 0 ? winners[winners.length - 1].returnValues.winnerAddress : '',\r\n                    txId: winners.length > 0 ? winners[winners.length - 1].transaction_id : ''\r\n                });\r\n            }\r\n        }\r\n        this.setState({ jackpotLoad: jackpotLoad });\r\n        //}.bind(this), 1000); //random fill\r\n    }\r\n\r\n    getRandomInt(min, max) {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n    }\r\n    //#endregion\r\n\r\n\r\n    // #region ================================ UTILS ================================ \r\n    secondsToTime(d) {\r\n        d = Number(d);\r\n        let h = Math.floor(d / 3600);\r\n        let m = Math.floor(d % 3600 / 60);\r\n        let s = Math.floor(d % 3600 % 60);\r\n\r\n        let hDisplay = h === 0 ? \"00\" : h;\r\n        let mDisplay = m === 0 ? \"00\" : m;\r\n        let sDisplay = s === 0 ? \"00\" : s;\r\n\r\n        return hDisplay + \":\" + mDisplay + \":\" + sDisplay;\r\n    }\r\n\r\n    findCooldownTime(d) {\r\n        if (this.state.hpeasyCooldownNum !== 3)\r\n            return \"00:00:00\";\r\n\r\n        let difference = new Date() - new Date(d * 1000);\r\n        let seconds = parseInt(difference / 1000);\r\n\r\n        if (seconds > 86400)\r\n            return \"00:00:00\";\r\n\r\n        let revertedSeconds = 86400 - seconds;\r\n\r\n        let h = Math.floor(revertedSeconds / 3600);\r\n        let m = Math.floor(revertedSeconds % 3600 / 60);\r\n        let s = Math.floor(revertedSeconds % 3600 % 60);\r\n\r\n        let hDisplay = h === 0 ? \"00\" : h < 10 ? \"0\" + h : h;\r\n        let mDisplay = m === 0 ? \"00\" : m < 10 ? \"0\" + m : m;\r\n        let sDisplay = s === 0 ? \"00\" : s < 10 ? \"0\" + s : s;\r\n\r\n        return hDisplay + \":\" + mDisplay + \":\" + sDisplay;\r\n    }\r\n\r\n    getDateFromTimestamp(timestamp) { //TODO\r\n        return new Date(timestamp).toISOString().replace('-', '/').split('T')[0].replace('-', '/');\r\n    }\r\n\r\n    convertToUsd(amount) {\r\n        return amount * this.state.ETH_TO_USD / 1000000000000000000;\r\n    }\r\n\r\n    convertToUsdAndRound(amount) {\r\n        return (amount * this.state.ETH_TO_USD / 1000000000000000000).toFixed(2);\r\n    }\r\n\r\n    truncateLong(hash, toLeave) {\r\n        return hash.substring(0, toLeave) + \"…\";\r\n    }\r\n    // #endregion\r\n\r\n\r\n    // #region ========================== BUTTONS FUNCTIONS ==========================\r\n    async reloadMatrixLevelUpDown(matrixId) {\r\n        if (matrixId === 0) return;\r\n\r\n        await this.getMatrixInfo(matrixId);\r\n        // eslint-disable-next-line\r\n        if (matrixId == this.state.lastUserMatrixId) {\r\n            this.setState({ isMatrixOfCurrentUser: true });\r\n        } else {\r\n            this.setState({ isMatrixOfCurrentUser: false });\r\n        }\r\n        this.getMatrixNetworkInfo(matrixId);\r\n    }\r\n\r\n    async changeToPreviousMatrix(event) {\r\n        if ((this.state.matrixIndex) === 0) return;\r\n\r\n        await this.getMatrixInfo(this.state.userMatricesIds[this.state.matrixIndex - 1]);\r\n        this.setState({ matrixIndex: this.state.matrixIndex - 1 });\r\n        this.setState({ lastUserMatrixId: this.state.userMatricesIds[this.state.matrixIndex] });\r\n        this.getMatrixNetworkInfo(this.state.userMatricesIds[this.state.matrixIndex]);\r\n    }\r\n\r\n    async changeToNextMatrix(event) {\r\n        if ((this.state.matrixIndex + 1) === this.state.matricesCnt) return;\r\n\r\n        await this.getMatrixInfo(this.state.userMatricesIds[this.state.matrixIndex + 1]);\r\n        this.setState({ matrixIndex: this.state.matrixIndex + 1 });\r\n        this.setState({ lastUserMatrixId: this.state.userMatricesIds[this.state.matrixIndex] });\r\n        this.getMatrixNetworkInfo(this.state.userMatricesIds[this.state.matrixIndex]);\r\n    }\r\n\r\n    async handleShowJackpot() {\r\n        this.setState({ isJackpotInfoBlock: !this.state.isJackpotInfoBlock });\r\n        if (!this.state.isJackpotInfoLoaded) {\r\n            this.getJackpotPayload();\r\n            this.checkJackpotPaymentStatus();\r\n        }\r\n    }\r\n\r\n    async checkJackpotPaymentStatus() {\r\n        let jackpotQueue = await Utils.getJackpotQueue();\r\n        jackpotQueue.betSize = parseInt(jackpotQueue.betSize.replace(\"000000000000\", \"\")) / 1000000;\r\n        this.setState({ jackpotQueue: jackpotQueue });\r\n\r\n        if (jackpotQueue === null) {\r\n            if (this.state.isRegistered) {\r\n                Swal.fire({\r\n                    title: 'Connection problem',\r\n                    icon: 'error',\r\n                    text: 'Sorry, can\\'t get jackpot payment status for current user, please retry'\r\n                })\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        if (jackpotQueue.isEthPaid) {\r\n            Swal.fire({\r\n                icon: 'info',\r\n                title: 'Not complete bet',\r\n                showCancelButton: true,\r\n                confirmButtonText: \"Let's do it now!\",\r\n                cancelButtonText: \"I need to think\",\r\n                html: 'We have noticed that you have already paid <b>' + jackpotQueue.betSize + \"&nbsp;BNB</b> to join Jackpot <b>line&nbsp;\" + jackpotQueue.line + \"</b>.</p> <p>Only one step's left to join this jackpot line: <br><b>\" + jackpotQueue.betSize + \"&nbsp;IGL</b> payment needed <br>\" + (this.state.easyBalance >= jackpotQueue.betSize ? \"<i>(it will be withdrawn from your&nbsp;IGL balance)</i>\" : (\" <i>(it costs <b>\" + jackpotQueue.betSize / this.state.ETH_TO_EASY + \"&nbsp;IGL</b>)<i></p>\"))\r\n            }).then(result => {\r\n                if (result.isConfirmed) {\r\n                    this.joinJackpotEasy(jackpotQueue.line, jackpotQueue.betSize, false);\r\n                }\r\n            });\r\n        } else if (jackpotQueue.isTokensPaid) {\r\n            Swal.fire({\r\n                icon: 'info',\r\n                title: 'Not complete bet',\r\n                showCancelButton: true,\r\n                confirmButtonText: \"Let's do it now!\",\r\n                cancelButtonText: \"I need to think\",\r\n                html: 'We have noticed that you have already paid <b>' + jackpotQueue.betSize + \"&nbsp;IGL</b> to join Jackpot <b>line&nbsp;\" + jackpotQueue.line + \"</b>.</p> <p>Only one step's left to join this jackpot line: <br><b>\" + jackpotQueue.betSize + \"&nbsp;BNB</b> payment needed</p>\"\r\n            }).then(result => {\r\n                if (result.isConfirmed) {\r\n                    this.joinJackpotEth(jackpotQueue.line, jackpotQueue.betSize, false);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    async handleShowJackpotParticipants(line, betSize) {\r\n        let participants = await Utils.getJackpotParticipants(line, betSize);\r\n        let html = '';\r\n        participants.forEach(address => {\r\n            html += \"<span class='swal-addresses'>\" + address + \"</span><br>\";\r\n        });\r\n\r\n        Swal.fire({\r\n            icon: 'info',\r\n            title: 'Participants of line ' + line + ',<br> bet size ' + betSize + '&nbsp;BNB/IGL',\r\n            html: html\r\n        });\r\n    }\r\n\r\n    async handleJoinJackpot(line, betSize) {\r\n        if (!this.state.useToken) {\r\n            Swal.fire({\r\n                    imageUrl: jackpotWhite,\r\n                    imageWidth: 300,\r\n                    imageHeight: 193,\r\n                    imageAlt: 'Jackpot image',\r\n                    title: 'Confirm your bet',\r\n                    showCancelButton: true,\r\n                    confirmButtonText: \"Let's go!\",\r\n                    html: 'Do you confirm you want to pay <b>' + betSize + \"&nbsp;BNB</b> <br>  to join Jackpot <b>\" + line + \"&nbsp;line</b> <p>Jackpot size is <b>\" + (betSize * line * 0.9).toFixed(3) + \" BNB</b></p>\",\r\n                }).then(result => {\r\n                    if (result.isConfirmed) {\r\n                        this.joinJackpotEth(line, betSize, false);\r\n                    }\r\n                });\r\n            return;\r\n        }\r\n        \r\n        if (this.state.jackpotQueue === null) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Connection problem',\r\n                text: 'Sorry, can\\'t get jackpot payment status for current user, please retry'\r\n            })\r\n            return;\r\n        }\r\n\r\n        let queue = this.state.jackpotQueue;\r\n        if ((queue.isTokensPaid && (queue.line !== line || queue.bets !== betSize))\r\n            || (queue.isEthPaid && (queue.line !== line || queue.bets !== betSize))) {\r\n            Swal.fire({\r\n                icon: 'info',\r\n                title: 'Pending payment for other bet',\r\n                showCancelButton: true,\r\n                confirmButtonText: \"Let's finish previous bet\",\r\n                cancelButtonText: \"I need to think\",\r\n                html: \"We have noticed that you have unfinished bet (line&nbsp;\" + queue.line + \", bet size \" + queue.betSize + \"&nbsp;BNB/IGL). <p>You can't make a new bet without finishing payment for the previous bet. <p>Do you want to finish payment?\",\r\n            }).then(result => {\r\n                if (result.isConfirmed) {\r\n                    if (queue.isTokensPaid) {\r\n                        this.joinJackpotEth(queue.line, queue.betSize, false);\r\n                    } else if (queue.isEthPaid) {\r\n                        this.joinJackpotEasy(queue.line, queue.betSize, false);\r\n                    }\r\n                } else {\r\n                    this.setState({ loader: false });\r\n                }\r\n            });\r\n        } else {\r\n            if (myConfig.JACKPOT_LINES.includes(line) && myConfig.JACKPOT_BETS.includes(betSize)) {\r\n                let isExtraTokensNeeded = this.state.easyBalance - betSize < 0;\r\n                Swal.fire({\r\n                    imageUrl: jackpotWhite,\r\n                    imageWidth: 300,\r\n                    imageHeight: 193,\r\n                    imageAlt: 'Jackpot image',\r\n                    title: 'Confirm your bet',\r\n                    showCancelButton: true,\r\n                    confirmButtonText: \"Let's go!\",\r\n                    html: 'Do you confirm you want to pay <b>' + betSize + \"&nbsp;IGL</b> <br> \" + (isExtraTokensNeeded ? \"<i>(it cost <b>\" + betSize / this.state.ETH_TO_EASY + \"&nbspBNB</b>)</i>\" : \"<i>(it will be withdrawn from your&nbsp;IGL balance)</i><br>\") + \" to join Jackpot <b>\" + line + \"&nbsp;line</b> <p>Jackpot size is <b>\" + (betSize * line * 0.9).toFixed(3) + \" BNB/IGL</b></p>\",\r\n                }).then(result => {\r\n                    if (result.isConfirmed) {\r\n                        this.joinJackpotEasy(line, betSize, true);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    async joinJackpotEasy(line, betSize, isEthNeeded) {\r\n        this.setState({ loader: true });\r\n\r\n        if (betSize <= this.state.easyBalance) {\r\n            await Utils.joinJackpotEasyExistingTokens(line, (betSize * 1000000).toString() + \"000000000000\")\r\n                .then(\r\n                    result => this.processJoinJackpotEasySuccess(line, betSize, isEthNeeded),\r\n                    error => this.handleErroredTransaction(error, 'Ok, I\\'ll check the result manually', true)\r\n                ).catch(err => {\r\n                    this.setState({ loader: false });\r\n                    console.error(\"Error\");\r\n                    console.error(err);\r\n                });\r\n        } else {\r\n            await Utils.joinJackpotEasyNewTokens(line, betSize * 1000000000000000000 / this.state.ETH_TO_EASY)\r\n                .then(\r\n                    result => this.processJoinJackpotEasySuccess(line, betSize, isEthNeeded),\r\n                    error => this.handleErroredTransaction(error, 'Ok, I\\'ll check the result manually', true)\r\n                ).catch(err => {\r\n                    this.setState({ loader: false });\r\n                    console.error(\"Error\");\r\n                    console.error(err);\r\n                });\r\n        }\r\n\r\n    }\r\n\r\n    processJoinJackpotEasySuccess(line, betSize, isEthNeeded) {\r\n        let html = isEthNeeded\r\n            ? \"<p>Nice, \" + betSize + \"&nbsp;IGL is paid! <br> One step separates you from your luck!</p> <p>Now you need to pay \" + betSize + \"&nbsp;BNB</p>\"\r\n            : \"<p>Congradulation! You have joined jackpot line <b>\" + line + \"</b> with bet size <b>\" + betSize + \"&nbsp;BNB/IGL</b></p>.<p>Jackpot prize is: <b>\" + (line * betSize * 0.9).toFixed(3) + \"&nbsp;BNB</b>!!!.</p><p>We wish you luck!</p>\";\r\n\r\n        Swal.fire({\r\n            icon: isEthNeeded ? 'info' : 'success',\r\n            title: 'Success',\r\n            confirmButtonText: isEthNeeded ? 'Let\\'s do it now' : 'Great!',\r\n            showCancelButton: isEthNeeded,\r\n            cancelButtonText: \"I'll do it later\",\r\n            html: html\r\n        }).then((result) => {\r\n            if (isEthNeeded && result.isConfirmed) {\r\n                this.joinJackpotEth(line, betSize, false);\r\n            }\r\n            else {\r\n                window.location.reload();\r\n            }\r\n        });\r\n    }\r\n\r\n    async joinJackpotEth(line, betSize, isEasyNeeded) {\r\n        this.setState({ loader: true });\r\n\r\n        await Utils.joinJackpotEth(line, (betSize * 1000000).toString() + \"000000000000\")\r\n            .then(\r\n                result => {\r\n                    let html = \"Congradulation! You have joined jackpot line <b>\" + line + \"</b> with bet size <b>\" + betSize + \"&nbsp;BNB/IGL</b>.<p>Jackpot prize is: <b>\" + (line * betSize * 0.9).toFixed(3) + \"&nbsp;BNB</b>!!!.</p><p>We wish you luck!</p>\";\r\n\r\n                    Swal.fire({\r\n                        title: 'Success',\r\n                        icon: 'success',\r\n                        confirmButtonText: 'Ok',\r\n                        html: html\r\n                    }).then((result) => {\r\n                        this.setState({ loader: false });\r\n                    });\r\n                },\r\n                error => {\r\n                    this.handleErroredTransaction(error, 'Ok, I\\'ll check the result manually', true);\r\n                })\r\n            .catch(\r\n                err => {\r\n                    this.setState({ loader: false });\r\n                    console.error(\"Error\");\r\n                    console.error(err);\r\n                });\r\n\r\n    }\r\n\r\n    async registrationCheck(actionName) {\r\n        if (!this.state.isRegistered) {\r\n            Swal.fire({\r\n                icon: 'warning',\r\n                title: 'Not logged in',\r\n                showCancelButton: true,\r\n                cancelButtonText: 'Got it',\r\n                confirmButtonText: 'Ok, let\\'s login/register',\r\n                html: \"<p>To \" + actionName + \" you need to login to your dashboard</p><p>If you want to login to your dashboard, please go to home page and press 'LOGIN/REGISTER' button</p>\"\r\n            }).then((result) => {\r\n                if (result.isConfirmed) {\r\n                    this.props.history.push('/');\r\n                }\r\n            });;\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n\r\n    logout() {\r\n        this.props.history.push('/');\r\n    }\r\n\r\n    onLoaderChange(showLoader) {\r\n        if (typeof showLoader === 'boolean' && showLoader !== null) {\r\n            this.setState({ loader: showLoader });\r\n        } else {\r\n            this.setState({ loader: !this.state.loader });\r\n        }\r\n    }\r\n    // #endregion\r\n\r\n    handleErroredTransaction(error, okButtonText, doReload = true) {\r\n        Swal.fire({\r\n            icon: 'error',\r\n            title: 'Fail',\r\n            html: error\r\n        }).then((result) => {\r\n            console.log(\"General error\");\r\n            this.setState({ loader: false });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"dashboard-container\">\r\n\r\n                {/* !!! HEADER !!! */}\r\n                <div className=\"main_head dashboard-page\" >\r\n                    <div className=\"logo\">\r\n                        <img className=\"logo-header\" alt=\"logo\" src={logo} />\r\n                    </div>\r\n\r\n                    <div className=\"extra-buttons\">\r\n                        <img className=\"jackpot\" alt=\"logo\" src={this.state.isJackpotInfoBlock ? require('../../assets/left_arrow.png') : jackpot} onClick={this.handleShowJackpot.bind(this)} />\r\n                        <BuyEasy\r\n                            onLoaderChange={this.onLoaderChange.bind(this)}\r\n                            isRegistered={this.state.isRegistered}\r\n                            viewerAddress={this.state.viewerAddress}\r\n                            easyAccountBalance={this.state.easyAccountBalance}\r\n                            easyBalance={this.state.easyBalance}\r\n                            ETH_TO_EASY={this.state.ETH_TO_EASY}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"header_container\">\r\n                        <div className=\"head_first\">\r\n                            <h1 className=\"stats-users-total\">{this.state.totalUsers}</h1>\r\n                            <h1 className=\"stats-users-hp\">{this.state.totalHPEasys}</h1>\r\n                        </div>\r\n                        <div className=\"head_second\">\r\n                            <h3>All<br />Participants</h3>\r\n                            <h3>All<br />HP's</h3>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"log\">\r\n                        <h2 className=\"head_third\">SPONSOR ID:&nbsp;<span className=\"user-referrer\">{this.state.sponsorId}</span> </h2>\r\n                        <div className=\"logTranslate\">\r\n                            <div className=\"logout\" onClick={this.logout.bind(this)}>{this.state.isRegistered ? 'LOGOUT' : 'EXIT'}</div>\r\n                            <div id=\"google_translate_element\"></div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"language-area\"></div>\r\n                </div>\r\n\r\n                <div className=\"main dashboard-page\">\r\n                    <div className=\"main_left\">\r\n\r\n                        {/* !!! GENERAL INFO !!! */}\r\n                        <div className=\"id\">\r\n                            <h1 className=\"id_first_h1\">ID&nbsp;<span className=\"user-id\">{this.state.userId}</span> </h1>\r\n                            <h1 className=\"id_second_h1\">\r\n                                <span className=\"subtitle\">Direct Referrals</span>\r\n                                <span>$<span className=\"user-earnings-total-usd\">{((this.state.matrixEarningEth + this.state.hpEarningEth) * this.state.ETH_TO_USD + (this.state.matrixEarningEth + this.state.hpEarningEth) * this.state.ETH_TO_USD / this.state.ETH_TO_EASY).toFixed(2)}</span></span>\r\n                            </h1>\r\n                            <h1 className=\"id_third_h1\">\r\n                                <span className=\"user-direct\">{this.state.directReferrals} </span>\r\n                                <span><span className=\"user-earnings-total\">{(this.state.matrixEarningEth + this.state.hpEarningEth).toFixed(4)}</span> BNB / {(this.state.matrixEarningEth + this.state.hpEarningEth).toFixed(4)} IGL</span></h1>\r\n                            <div className=\"cards_first\">\r\n                                <div className=\"cards_front\">MATRIX</div>\r\n                                <div className=\"cards_back\">\r\n                                    <h1>$<span className=\"user-earnings-matrix-usd\">{(this.state.matrixEarningEth * this.state.ETH_TO_USD).toFixed(2)}</span> {this.state.matrixEarningEth !== 0 ? \" + $\" + (this.state.matrixEarningEth * this.state.ETH_TO_USD / this.state.ETH_TO_EASY).toFixed(2) : \"\"}</h1>\r\n                                    <h3><span className=\"user-earnings-matrix\">{this.state.matrixEarningEth}</span> BNB + {this.state.matrixEarningEth} IGL</h3>\r\n                                    <h4 className=\"user-matrices-cnt\">{this.state.matricesCnt}</h4>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"cards_first\">\r\n                                <div className=\"cards_front\">HP</div>\r\n                                <div className=\"cards_back\">\r\n                                    <h1>$<span className=\"user-earnings-hp-usd\">{(this.state.hpEarningEth * this.state.ETH_TO_USD).toFixed(2)}</span> {this.state.hpEarningEth !== 0 ? \" + $\" + (this.state.hpEarningEth * this.state.ETH_TO_USD / this.state.ETH_TO_EASY).toFixed(2) : ''}</h1>\r\n                                    <h3><span className=\"user-earnings-hp\">{this.state.hpEarningEth}</span> BNB + {this.state.hpEarningEth} IGL</h3>\r\n                                    <h4><span className=\"user-hp-cnt\">{this.state.matricesCnt}</span>/150</h4>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"cards_second\">\r\n                                <div className=\"cards_front\">\r\n                                    <p>REFERRAL LINK</p>\r\n                                </div>\r\n                                <div className=\"cards_back scroll\">\r\n                                    <p className=\"affil-link readonly\">https://hpeasy-eth.io/{this.state.userId}</p>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"cards_second\">\r\n                                <div className=\"cards_front\">\r\n                                    <p>{this.state.isRegistered ? 'YOUR' : 'ACCOUNT'} WALLET</p>\r\n                                </div>\r\n                                <div className=\"cards_back scroll\">\r\n                                    <a className=\"user-address readonly\" target=\"_blank\" rel=\"noopener noreferrer\" href={myConfig.ETHERSCAN_DOMAIN + \"address/\" + this.state.address}>{this.state.address}</a>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"cards_second\">\r\n                                <div className=\"cards_front\">\r\n                                    <p>CONTRACT</p>\r\n                                </div>\r\n                                <div className=\"cards_back scroll\">\r\n                                    <a className=\"contract-address\" target=\"_blank\" rel=\"noopener noreferrer\" href={myConfig.ETHERSCAN_DOMAIN + \"address/\" + myConfig.CONTRACT_ADDRESS_HPEASY + \"/code\"}>{myConfig.CONTRACT_ADDRESS_HPEASY}</a>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* !!! BUY HP !!! */}\r\n                        <div className=\"front_button_hp\">\r\n                            HP\r\n                        </div>\r\n                        <div className=\"hp\">\r\n                            <BuyHpEasy\r\n                                key={\"buyHpEasy\"}\r\n                                isRegistered={this.state.isRegistered}\r\n                                onLoaderChange={this.onLoaderChange.bind(this)}\r\n                                hpeasyCooldownNum={this.state.hpeasyCooldownNum}\r\n                                hpeasyCooldownTime={this.state.hpeasyCooldownTime}\r\n                                pageIsReady={this.state.pageIsReady}\r\n                                easyBalance={this.state.easyBalance}\r\n                                isRenew={false}\r\n                                useToken={this.state.useToken}\r\n                                PURCHASE_COST_ETH={this.state.PURCHASE_COST_ETH}\r\n                                PURCHASE_COST_EASY={this.state.PURCHASE_COST_EASY}\r\n                                PURCHASE_COST_EASY_ETH_EQUIVALENT={this.state.PURCHASE_COST_EASY_ETH_EQUIVALENT}\r\n                            />\r\n                            <h2><span id=\"hp-cooldown-num\">{this.state.hpeasyCooldownNum}</span>/3</h2>\r\n                            <h1 id=\"hp-cooldown-time\">{this.findCooldownTime(this.state.hpeasyCooldownTime)}</h1>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div key=\"matrices-info\" className=\"main_right\" style={{ display: this.state.isJackpotInfoBlock ? 'none' : 'block' }}>\r\n\r\n                        {/* MATRICES */}\r\n                        <div className=\"main_right_topBar\">\r\n                            <div className=\"mian_top_div\" id=\"matrix-up-btn\" onClick={() => this.reloadMatrixLevelUpDown(this.state.currentMatrix.matrixReferrer)}>\r\n                                <img alt=\"top_arrow\" src={require('../../assets/top_arrow.png')} />\r\n                                <p>HP <span id=\"matrix-referrer\">{this.state.currentMatrix.matrixReferrer !== 0 ? this.state.currentMatrix.matrixReferrer : ''} <span style={{ display: this.state.referMatrixOwnerId ? 'inline' : 'none' }} className=\"submatrix-description\">(USER {this.state.referMatrixOwnerId})</span></span></p>\r\n                            </div>\r\n                            <div className=\"main_right_top_container\">\r\n                                <div className=\"arrow_area matrix-own\" style={{ visibility: this.state.isMatrixOfCurrentUser ? 'initial' : 'hidden' }}>\r\n                                    <img onClick={this.changeToPreviousMatrix.bind(this)} alt=\"left_arrow\" src={require('../../assets/left_arrow.png')} id=\"matrix-prev-btn\" />\r\n                                    <div className=\"arrow_desc\">\r\n                                        <p>HP</p>\r\n                                        <div><span id=\"matrix-prev\" >{this.state.userMatricesIds[this.state.matrixIndex - 1]}</span></div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"id_card\">\r\n                                    <div className=\"id_card_id\">\r\n                                        <div className=\"id_card_head_container\">\r\n                                            <p className=\"id_card_left_first\">HP <span id=\"matrix-id\">{this.state.currentMatrix.id}</span></p>\r\n                                        </div>\r\n                                        <div className=\"id_card_countArea\">\r\n                                            <div className=\"matrix-own\" style={{ visibility: this.state.isMatrixOfCurrentUser ? 'initial' : 'hidden' }}>\r\n                                                <p>CYCLE</p>\r\n                                                <p className=\"matrix-cycles\">{this.state.currentMatrix.cycles}</p>\r\n                                            </div>\r\n                                            <div className=\"matrix-own\" style={{ visibility: this.state.isMatrixOfCurrentUser ? 'initial' : 'hidden' }}>\r\n                                                <p>BUNCH<br /> CYCLE</p>\r\n                                                <p className=\"matrix-cycles\">{this.state.currentMatrix.bunchCycles}</p>\r\n                                            </div>\r\n                                            <div className=\"matrix-own\" style={{ visibility: this.state.isMatrixOfCurrentUser ? 'initial' : 'hidden' }}>\r\n                                                <p>HP</p>\r\n                                                <p><span className=\"matrix-index\">{this.state.matrixIndex + 1}</span>/<span className=\"user-hp-cnt\">{this.state.matricesCnt}</span> </p>\r\n                                            </div>\r\n                                            <div>\r\n                                                <p>NETWORK</p>\r\n                                                <p id=\"matrix-network\">{this.state.network}</p>\r\n                                            </div>\r\n                                            <div className=\"matrix-legend\">\r\n                                                <span>Level1: <span className=\"matrix-network-0\">{this.state.level1}</span> </span>\r\n                                                <span>Level2: <span className=\"matrix-network-1\">{this.state.level2}</span> </span>\r\n                                                <span>Level3: <span className=\"matrix-network-2\">{this.state.level3}</span> </span>\r\n                                                <span>Level4: <span className=\"matrix-network-3\">{this.state.level4}</span> </span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"unrenewedHp\" style={{\r\n                                        display: this.state.currentMatrix.bunchCycles >= this.state.bunchCyclesLimit ? 'block' : 'none'\r\n                                    }}></div>\r\n                                    {(this.state.isMatrixOfCurrentUser && this.state.currentMatrix.bunchCycles >= this.state.bunchCyclesLimit)\r\n                                        && <BuyHpEasy\r\n                                            key={\"renewHpEasy\"}\r\n                                            isRegistered={this.state.isRegistered}\r\n                                            onLoaderChange={this.onLoaderChange.bind(this)}\r\n                                            hpeasyCooldownNum={this.state.hpeasyCooldownNum}\r\n                                            hpeasyCooldownTime={this.state.hpeasyCooldownTime}\r\n                                            totalHPEasys={this.state.totalHPEasys}\r\n                                            easyBalance={this.state.easyBalance}\r\n                                            isRenew={true}\r\n                                            useToken={this.state.useToken}\r\n                                            pageIsReady={this.state.pageIsReady}\r\n                                            matrixToRenew={this.state.currentMatrix.id}\r\n\r\n                                            PURCHASE_COST_ETH={this.state.PURCHASE_COST_ETH}\r\n                                            PURCHASE_COST_EASY={this.state.PURCHASE_COST_EASY}\r\n                                            PURCHASE_COST_EASY_ETH_EQUIVALENT={this.state.PURCHASE_COST_EASY_ETH_EQUIVALENT}\r\n                                        />}\r\n                                </div>\r\n                                <div className=\"arrow_area matrix-own\" style={{ visibility: this.state.isMatrixOfCurrentUser ? 'initial' : 'hidden' }}>\r\n                                    <div className=\"arrow_desc\">\r\n                                        <p>HP</p>\r\n                                        <div>\r\n                                            <span id=\"matrix-next\" >{this.state.userMatricesIds[this.state.matrixIndex + 1]}</span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <img onClick={this.changeToNextMatrix.bind(this)} alt=\"right_arrow\" src={require('../../assets/right_arrow.png')} id=\"matrix-next-btn\" />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"ids_container\">\r\n                                <div className=\"ids_bubbles\">\r\n                                    {this.state.currentMatrix.referrals.map((ref, index) => (\r\n                                        <div\r\n                                            className={\"matrix-ref\" + (ref.id === 0 ? \" empty\" : ref.type === 'user' ? \" green\" : \" orange\")}\r\n                                            key={\"matrix-ref-\" + index}\r\n                                            onClick={() => this.reloadMatrixLevelUpDown(ref.id)}>\r\n                                            {ref.id !== 0 ? ref.id : ''}\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"legend\">\r\n                                <div className=\"legend-item\">\r\n                                    <div className=\"legend-srcle empty\"></div>\r\n                                    <div className=\"legend-text\">Empty</div>\r\n                                </div>\r\n                                <div className=\"legend-item\">\r\n                                    <div className=\"legend-circle blue\"></div>\r\n                                    <div className=\"legend-text\">Downlines</div>\r\n                                </div>\r\n                                <div className=\"legend-item\">\r\n                                    <div className=\"legend-circle green\"></div>\r\n                                    <div className=\"legend-text\">My New HP</div>\r\n                                </div>\r\n                                <div className=\"legend-item\">\r\n                                    <div className=\"legend-circle orange\"></div>\r\n                                    <div className=\"legend-text\">Spill Over</div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* TRANSACTION TABLE */}\r\n                        <div className=\"table_body\" style={{ display: this.state.transactions.length > 0 ? 'block' : 'none' }}>\r\n                            <table>\r\n                                <thead className=\"thead\">\r\n                                    <tr>\r\n                                        <th>HASH</th>\r\n                                        <th>SYSTEM</th>\r\n                                        <th>DATE</th>\r\n                                        <th>$/BNB</th>\r\n                                        <th>$/IGL</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody className=\"tbody\">\r\n\r\n                                    {this.state.transactions.map((transaction, index) => (\r\n                                        <tr key={index}>\r\n                                            <td >\r\n                                                <a target=\"_blank\" rel=\"noopener noreferrer\" href={myConfig.ETHERSCAN_DOMAIN + \"tx/\" + transaction.id}>{this.truncateLong(transaction.id, 7)}</a>\r\n                                            </td>\r\n                                            <td>{transaction.type}</td>\r\n                                            <td>{transaction.date}</td>\r\n                                            <td>\r\n                                                {this.convertToUsdAndRound(transaction.amount)} / {transaction.amount / 1000000000000000000}\r\n                                            </td>\r\n                                            <td>\r\n                                                {this.convertToUsdAndRound(transaction.amount / this.state.ETH_TO_EASY)} / {transaction.amount / 1000000000000000000}\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div key=\"jackpot-info\" className=\"main_right\" style={{ display: this.state.isJackpotInfoBlock ? 'block' : 'none' }}>\r\n                        <div className=\"main_right_topBar jackpotInfo\">\r\n                            <p className=\"link\" onClick={this.handleShowJackpot.bind(this)}>Back to matrices</p>\r\n                            <p className=\"jackpot-load-dummy\" style={{ display: this.state.jackpotLoad.length > 0 ? 'none' : 'block' }}>Loading jackpot info...</p>\r\n\r\n                            <div className=\"jackpot-data\" key=\"jackpotData\" style={{ display: this.state.jackpotLoad.length > 0 ? 'block' : 'none' }}>\r\n                                <div className=\"bet-fills-container\">\r\n                                    {this.state.jackpotLoad.map((betLine, index) => (\r\n                                        <div key={betLine.line + \"-\" + betLine.betSize} className=\"line-info-wrapper\" style={{ marginBottom: betLine.winnersCount > 0 ? '' : '50px' }}>\r\n                                            <div className=\"line-info\">\r\n                                                <span className=\"line-label\"><span>LINE: </span> {betLine.line} </span>\r\n                                                <span className=\"bet-label\"><span>BET SIZE: </span> {betLine.betSize} BNB/IGL</span>\r\n                                            </div>\r\n                                            <div>\r\n                                                <div className=\"bet-fill-progress\" style={{ background: 'linear-gradient(to right, #6286d2 0%, #3063bc ' + (betLine.betsCount * 100) / betLine.line + '%, #bac4d8 0%)' }}>{betLine.betsCount}</div>\r\n                                                <div className=\"buy-easy join-jackpot\" onClick={() => this.handleJoinJackpot(betLine.line, betLine.betSize)}>JOIN</div>\r\n                                                <p><span className=\"sub-label\">Jackpot size: </span><b>{(betLine.line * betLine.betSize * 0.9).toFixed(3)} BNB + {(betLine.line * betLine.betSize * 0.9).toFixed(3)} IGL</b></p>\r\n                                                <p style={{ display: betLine.winnersCount > 0 ? 'block' : 'none' }} ><span className=\"sub-label\">Total winners:</span> <b>{betLine.winnersCount}</b></p>\r\n                                                <p style={{ display: betLine.lastWinner ? 'block' : 'none' }}>\r\n                                                    <span className=\"sub-label\">Last winner:</span> <span className=\"address-winner\">\r\n                                                        <a target=\"_blank\" rel=\"noopener noreferrer\" href={myConfig.ETHERSCAN_DOMAIN + \"tx/\" + betLine.txId}>{this.truncateLong(betLine.lastWinner, 20)}</a>\r\n                                                    </span>\r\n                                                </p>\r\n                                                <p style={{ display: betLine.betsCount > 0 ? 'block' : 'none' }} className=\"link\" onClick={() => this.handleShowJackpotParticipants(betLine.line, betLine.betSize)}>Show all participants</p>\r\n                                                <div></div>\r\n                                            </div>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"darkener\" style={{ display: this.state.loader ? 'block' : 'none' }}></div>\r\n                <Loader\r\n                    className=\"loader\"\r\n                    type=\"Oval\"\r\n                    color=\"#00BFFF\"\r\n                    height={100}\r\n                    width={100}\r\n                    visible={this.state.loader}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Dashboard);\r\n","import React from 'react';\r\nimport Swal from 'sweetalert2'; //https://sweetalert2.github.io\r\nimport Loader from 'react-loader-spinner'; //https://www.npmjs.com/package/react-loader-spinner\r\nimport '../Registration/Registration.scss';\r\nimport './SecondRegistrationStep.scss';\r\nimport logo from '../../assets/logo-.svg';\r\nimport progressIcon from '../../assets/2nd_registration_step1.svg';\r\nimport Utils from '../../utils';\r\n\r\n\r\nclass SecondRegistrationStep extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            userAddress: props.referrAddress ?? '',\r\n            loader: false,\r\n            isEthPaid: false,\r\n            isEasyPaid: false,\r\n            REGISTRATION_COST_ETH_FULL: 0,\r\n            REGISTRATION_COST_ETH: 0,\r\n            REGISTRATION_COST_EASY_ETH_EQUIVALENT: 0,\r\n            easyBalance: 0,\r\n            isExtraTokenNeeded: true\r\n        };\r\n\r\n        if (typeof this.props.location.state !== 'undefined' && this.props.location.state.isEthPaid !== 'undefined' && this.props.location.state.isEasyPaid !== 'undefined') {\r\n            this.state.isEthPaid = this.props.location.state.isEthPaid;\r\n            this.state.isEasyPaid = this.props.location.state.isEasyPaid;\r\n        }\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await Utils.setWeb3(window);\r\n\r\n        this.initData();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.log(\"In unmount\");\r\n        this._isMounted = false;\r\n    }\r\n\r\n    async initData() {\r\n        this.getRegistrationCost();\r\n        this.checkPaymentStatus();\r\n        this.initEasyBalance();\r\n    }\r\n\r\n    async getRegistrationCost() {\r\n        let registrationCostEth = await Utils.getRegistrationCost();\r\n        if (registrationCostEth === null) return;\r\n        this.setState({ REGISTRATION_COST_ETH_FULL: registrationCostEth });\r\n        this.setState({ REGISTRATION_COST_ETH: registrationCostEth / 1000000000000000000 });\r\n\r\n        let registrationCostEasy = await Utils.getRegistrationCostEasyInEthEquivalent(registrationCostEth);\r\n        if (registrationCostEasy === null) return;\r\n        this.setState({ REGISTRATION_COST_EASY_ETH_EQUIVALENT: registrationCostEasy });\r\n\r\n        if (this.state.easyBalance >= this.state.REGISTRATION_COST_ETH) {\r\n            this.setState({ isExtraTokenNeeded: false });\r\n        } else {\r\n            this.setState({ isExtraTokenNeeded: true });\r\n        }\r\n    }\r\n\r\n    async checkPaymentStatus() {\r\n        if (await Utils.isCurrentUserExists()) {\r\n            this.props.history.push('/dashboard');\r\n            return;\r\n        } else {\r\n            let payment = await Utils.getPaymentStatusForCurrentUser();\r\n\r\n            if (payment.isEthPaid && !payment.isTokensPaid) {\r\n                this.state.isEthPaid = true;\r\n                this.state.isEasyPaid = false;\r\n            } else if (!payment.isEthPaid) {\r\n                this.props.history.push({\r\n                    pathname: '/register',\r\n                    state: {\r\n                        isEthPaid: true,\r\n                        isEasyPaid: false,\r\n                        referrId: this.state.referrId\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    async initEasyBalance() {\r\n        let easyBalance = await Utils.getEasyBalanceByUser();\r\n        if (easyBalance === null) return;\r\n        this.setState({ easyBalance: easyBalance });\r\n\r\n        if (easyBalance >= this.state.REGISTRATION_COST_ETH) {\r\n            this.setState({ isExtraTokenNeeded: false });\r\n        } else {\r\n            this.setState({ isExtraTokenNeeded: true });\r\n        }\r\n    }\r\n\r\n\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.setState({ loader: true });\r\n\r\n        if (this.state.REGISTRATION_COST_EASY_ETH_EQUIVALENT === 0 && this.state.isExtraTokenNeeded) {\r\n            Swal.fire({\r\n                icon: 'question',\r\n                title: 'Getting registration cost',\r\n                confirmButtonText: 'Ok, I\\'ll retry',\r\n                html: 'Trying to get registration cost from smartcontract, please retry'\r\n            }).then((result) => {\r\n                this.setState({ loader: false });\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        if (this.state.isExtraTokenNeeded) {\r\n            await Utils.payAndSendEasy(this.state.REGISTRATION_COST_EASY_ETH_EQUIVALENT)\r\n                .then(\r\n                    result => this.handleSuccessfulSubmit(result),\r\n                    error => this.handleErroredSubmit(error))\r\n                .catch(\r\n                    error => {\r\n                        this.setState({ loader: false });\r\n                        console.error(\"INFINITY GLOBAL error\");\r\n                        console.error(error);\r\n                        this.setState({ loader: false });\r\n                    });\r\n            console.log(\"Smartcontract operation is finished\");\r\n        } else {\r\n            await Utils.sendEasy(this.state.REGISTRATION_COST_ETH_FULL)\r\n                .then(\r\n                    result => this.handleSuccessfulSubmit(result),\r\n                    error => this.handleErroredSubmit(error))\r\n                .catch(\r\n                    error => {\r\n                        this.setState({ loader: false });\r\n                        console.error(\"INFINITY GLOBAL error\");\r\n                        console.error(error);\r\n                        this.setState({ loader: false });\r\n                    });\r\n            console.log(\"Smartcontract operation is finished\");\r\n        }\r\n    }\r\n\r\n    async handleSuccessfulSubmit(result) {\r\n        Swal.fire({\r\n            title: 'Success',\r\n            icon: 'success',\r\n            html: 'Welcome to the INFINITY GLOBAL family! <br>You will be redirected to your dashboard'\r\n        }).then((result) => {\r\n            this.setState({ loader: false });\r\n            this.props.history.push('/dashboard');\r\n        });\r\n    }\r\n\r\n    async handleErroredSubmit(error) {\r\n        Swal.fire({\r\n            icon: 'error',\r\n            title: 'Fail',\r\n            html: error\r\n        }).then(result => {\r\n            this.setState({ loader: false });\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        let text = 'To complete your registration you need to ' + (this.state.isExtraTokenNeeded ? 'purchase ' + this.state.REGISTRATION_COST_ETH + ' EASY (cost ' + this.state.REGISTRATION_COST_EASY_ETH_EQUIVALENT / 1000000000000000000 + ' ETH) and send the to the HPEASY ETH smartcontract' : 'send ' + this.state.REGISTRATION_COST_ETH + ' EASY COIN to the HPEASY ETH smartcontract')\r\n        if (!this.state.isEthPaid && this.state.isEasyPaid) {\r\n            text = this.state.REGISTRATION_COST_ETH + ' INFINITY GLOBAL is paid. Nice! To complete your registration you need to go to registration page and trasfer ' + this.state.REGISTRATION_COST_ETH + ' BNB to the INFINITY GLOBAL smartcontract'\r\n        }\r\n\r\n        return (\r\n            <div className=\"super_container registration-2nd-page\">\r\n                <div className=\"login_container\">\r\n                    <img className=\"logo-login\" alt=\"logo\" src={logo} />\r\n                    <img className=\"progressIcon\" alt=\"progressIcon\" src={progressIcon} />\r\n\r\n                    <p className=\"confirm-hide\" style={{ display: 'none' }}>For access to all the functions of your personal account, use Login:</p>\r\n                    <div id=\"login-btn-metamask\" className=\"login-btn confirm-hide\" style={{ display: 'none' }}>REGISTER 2n STEP</div>\r\n                    <div id=\"confirm-ref\" >\r\n                        <p>{text}</p>\r\n\r\n                        <form onSubmit={this.handleSubmit}>\r\n                            <input className=\"login-btn\" id=\"register-btn-confirm\" type=\"submit\" value={this.state.isExtraTokenNeeded ? \"purchase and send\" : \"send\"} disabled={this.state.loader} style={{ width: '380px' }} />\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                <div className=\"darkener\" style={{ display: this.state.loader ? 'block' : 'none' }}></div>\r\n                <Loader\r\n                    className=\"loader\"\r\n                    type=\"Oval\"\r\n                    color=\"#00BFFF\"\r\n                    height={100}\r\n                    width={100}\r\n                    visible={this.state.loader}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SecondRegistrationStep;\r\n","import React from 'react';\nimport Registration from '../Registration';\nimport Home from './Home';\nimport Admin from '../Admin';\nimport Dashboard from '../Dashboard';\nimport SecondRegistrationStep from '../SecondRegistrationStep';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n//import Maintenance from './Maintenance';\n\nimport './App.scss';\n\nclass App extends React.Component {\n\n    async componentDidMount() { \n    }\n\n    render() {\n        return (\n            <Router>\n                <Switch>\n                    <Route path=\"/register/:id\" component={Registration}></Route>\n                    <Route path=\"/register\" component={Registration}></Route>\n                    <Route path=\"/dashboard/:id\" component={Dashboard}></Route>\n                    <Route path=\"/dashboard/\" component={Dashboard}></Route> \n                    <Route path=\"/regfinish\" component={SecondRegistrationStep}></Route>\n                    <Route path=\"/admin\" component={Admin}></Route>\n                    <Route path=\"/:id\" component={Home}></Route>\n                    <Route path=\"/\" component={Home}></Route>\n                    {/* <Route path=\"/:id\" component={Maintenance}></Route>\n                    <Route path=\"/\" component={Maintenance}></Route> */}\n                    {/* <Route path=\"/\" exact component={Root}></Route> */}\n                </Switch>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));","module.exports = __webpack_public_path__ + \"static/media/logo-.40b7f71a.svg\";"],"sourceRoot":""}